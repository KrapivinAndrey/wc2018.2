#Использовать JSON
#Использовать strings

Перем Консоль;
Перем ПарсерJSON;
Перем НачалоИтерации;
Перем НомерИтерации;
Перем НомерИтерацииДвижение;
Перем Отладка;

Перем Состояние;
Перем Ответ;
Перем Корабли;
Перем КораблиПротивника;
Перем КораблиПротивникаЛекс;
Перем РазмерКарты;
Перем ЭтоДрафт;
Перем КтоКого;

/////////////////////////////////////////////////////
// Сценарий

Процедура ВыполнитьСценарий()
	
	//Если НомерИтерации > 200 Тогда
	//	Консоль.ВывестиСтроку("game over");
	//КонецЕсли;
	
	// Змея();
	// Отстреляться();
	
	Таран();
	
КонецПроцедуры

Процедура ВыполнитьСценарийДрафт()
	
	// ДрафтДляЗмеи();
	ДрафтТаран();
КонецПроцедуры

/////////////////////////////////////////////////////
// Процедуры и функции обработки сценария

#Область ПроцедурыИФункцииОбработкиСценария

Функция СобраныйКорабль(ТипКорабля)
	
	Если ЭтоДрафт <> Истина Тогда
		ВызватьИсключение "Функция доступна только на драфте";
	КонецЕсли;
	
	СобраныеКорабли = Состояние["CompleteShips"];
	
	Для Каждого СобраныйКорабль Из СобраныеКорабли Цикл
		
		Если ВРег(СобраныйКорабль["Id"]) = ВРег(ТипКорабля) Тогда
			Возврат СобраныйКорабль;
		КонецЕсли
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция СобратьКорабль(СтрокаМодули = "big_energy, big_health, big_blaster, big_engine")
	
	Размер 			      = 0;
	РазмерМаксимальный    = 8;
	Оборудование 		  = Новый Массив;
	ОборудованиеСтоимость = 0;
	
	МассивМодулей = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(СтрокаМодули);
	Для Каждого Модуль Из МассивМодулей Цикл
		
		МодульКорабля = МодульКорабля(Модуль);
		Если МодульКорабля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МодульКорабля["AvailableToBuy"] = Истина Тогда
			
			Если Размер + МодульКорабля["Size"] > РазмерМаксимальный Тогда
				Продолжить;
			КонецЕсли;
			
			Оборудование.Добавить(МодульКорабля["Equipment"]["Name"]);
			
			Размер = Размер + МодульКорабля["Size"];
			ОборудованиеСтоимость = ОборудованиеСтоимость + МодульКорабля["Price"];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Корбль = Новый Соответствие;
	Корбль.Вставить("Id"	   , NULL);
	Корбль.Вставить("Equipment", Оборудование);
	Корбль.Вставить("Price"    , ОборудованиеСтоимость);
	
	Возврат Корбль;
	
КонецФункции

Функция ТормознойПуть(Знач Скорость)
	
	Если Тип("Число") = ТипЗнч(Скорость) Тогда 
		Скорость = Скорость;
	ИначеЕсли Тип("Строка") = ТипЗнч(Скорость) Тогда
		Скорость = Число(Скорость);
	КонецЕсли;
	
	i = 1;
	j = 0;
	
	МодульСкорости = МодульЧисла(Скорость);
	
	Пока i <= МодульСкорости Цикл 
		j = j + i;
		i = i + 1;
	КонецЦикла;
	
	Возврат ?(Скорость < 0 , j * (-1), j);
	
КонецФункции

/////////////////////////////////////////////////////
// Лучи

Функция ТочкаНачалаВыстрела(Знач Корабль, Знач Цель)
	
	//Из правил: Бластер стреляет по цели из ближайшей (по манхэттенской метрике) точки корабля
	//Наблюдение: Корабль задается точкой с минимальными координатами (левой верхней)
	
	ТочкаНачалаВыстрела = НовыйВектор(Корабль["Position"]);
	ТочкаЦели = НовыйВектор(Корабль["Position"]);
	
	ЦельСправа = ТочкаНачалаВыстрела.x < ТочкаЦели.x;
	Если ЦельСправа Тогда
		ТочкаНачалаВыстрела.x = ТочкаНачалаВыстрела.x + 1;
	КонецЕсли;
	
	ЦельСверху = ТочкаНачалаВыстрела.y < ТочкаЦели.y;
	Если ЦельСверху Тогда
		ТочкаНачалаВыстрела.y = ТочкаНачалаВыстрела.y + 1;
	КонецЕсли;
	
	ЦельСбоку = ТочкаНачалаВыстрела.z < ТочкаЦели.z;
	Если ЦельСбоку Тогда // сам хз, с какого боку
		ТочкаНачалаВыстрела.z = ТочкаНачалаВыстрела.z + 1;
	КонецЕсли;
	
	Возврат ТочкаНачалаВыстрела;
	
КонецФункции

Функция ТочкиЛучаПоБрезенхему(Знач Начало, Знач Конец, ЭлементыСтроки = Ложь, Радиус = Неопределено)
	
	Результат = Новый Массив;
	
	Начало = НовыйВектор(Начало);
	Конец = НовыйВектор(Конец);
	
	Координаты = Новый ТаблицаЗначений;
	Координаты.Колонки.Добавить("Имя");
	Координаты.Колонки.Добавить("Расстояние");
	
	Строка = Координаты.Добавить();
	Строка.Имя = "x";
	Строка.Расстояние = МодульЧисла(Начало.x - Конец.x);
	
	Строка = Координаты.Добавить();
	Строка.Имя = "y";
	Строка.Расстояние = МодульЧисла(Начало.y - Конец.y);
	
	Строка = Координаты.Добавить();
	Строка.Имя = "z";
	Строка.Расстояние = МодульЧисла(Начало.z - Конец.z);
	
	Координаты.Сортировать("Расстояние Убыв");	
	
	КоличествоИтераций = МодульЧисла(Конец[Координаты[0].Имя] - Начало[Координаты[0].Имя]);
	Если КоличествоИтераций = 0 Тогда
		
		Результат.Добавить(Начало);
		
		Если ЭлементыСтроки Тогда
			
			Для Сч = 0 По Результат.Количество() - 1 Цикл
				Результат[Сч] = ВекторСтрокой(Результат[Сч]);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Смещение = Новый Соответствие;
	ТекущаяОшибка = Новый Соответствие;
	ТекущаяКоордината = Новый Соответствие;
	Направление = Новый Соответствие;
	Для ИндексКоординаты = 1 По 2 Цикл
		Смещение[ИндексКоординаты] = МодульЧисла(Конец[Координаты[ИндексКоординаты].Имя] - Начало[Координаты[ИндексКоординаты].Имя]) / КоличествоИтераций;
		ТекущаяОшибка[ИндексКоординаты] = 0;
		ТекущаяКоордината[ИндексКоординаты] = Начало[Координаты[ИндексКоординаты].Имя];		
		Направление[ИндексКоординаты] = Конец[Координаты[ИндексКоординаты].Имя] - Начало[Координаты[ИндексКоординаты].Имя];
		Направление[ИндексКоординаты] = ?(Направление[ИндексКоординаты] > 0, 1, -1);
	КонецЦикла;
	
	Итерация = 1;
	ГлавнаяКоордината = Начало[Координаты[0].Имя];
	НаправлениеГлавнойКоординаты = ?(Начало[Координаты[0].Имя] < Конец[Координаты[0].Имя], 1, -1);
	Пока Истина Цикл
		
		НовыйВектор = НовыйВектор("0/0/0");
		НовыйВектор[Координаты[0].Имя] = ГлавнаяКоордината;
		
		Для ИндексКоординаты = 1 По 2 Цикл
			НовыйВектор[Координаты[ИндексКоординаты].Имя] = ТекущаяКоордината[ИндексКоординаты];
			ТекущаяОшибка[ИндексКоординаты] = ТекущаяОшибка[ИндексКоординаты] + Смещение[ИндексКоординаты];
			Если ТекущаяОшибка[ИндексКоординаты] > 0.5 Тогда
				ТекущаяОшибка[ИндексКоординаты] = ТекущаяОшибка[ИндексКоординаты] - 1;
				ТекущаяКоордината[ИндексКоординаты] = ТекущаяКоордината[ИндексКоординаты] + Направление[ИндексКоординаты];
			КонецЕсли;
		КонецЦикла;
		
		Результат.Добавить(НовыйВектор);
		
		Если Радиус = Неопределено Тогда // строим до конечной координаты
			Если ГлавнаяКоордината = Конец[Координаты[0].Имя] Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Если Итерация > Радиус Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ГлавнаяКоордината = ГлавнаяКоордината + НаправлениеГлавнойКоординаты;
		Итерация = Итерация + 1;
		
	КонецЦикла;
	
	Если ЭлементыСтроки Тогда
		
		Для Сч = 0 По Результат.Количество() - 1 Цикл
			Результат[Сч] = ВекторСтрокой(Результат[Сч]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

/////////////////////////////////////////////////////
// Сценарии перемещения

Процедура ВыехатьНаЦентр()
	
	ВекторСкорости 			 = "1/0/0";
	ВекторСкоростиТорможение = "-1/0/0"; 
	
	ПозцияКорабля1 = НовыйВектор(Корабли[0]["Position"]);
	
	Если ПозцияКорабля1.Y = 28 И ПозцияКорабля1.Z = 28 Тогда
		ВекторСкорости = "-1/28/28";
		ВекторСкоростиТорможение = "1/28/28";	
	КонецЕсли;
	
	Для Каждого Корабль Из Корабли Цикл
		
		Если НомерИтерации = 2 
			ИЛИ НомерИтерации = 3 Тогда
			
			Параметры = Новый Соответствие;
			Параметры.Вставить("Id"		, Корабль["Id"]);
			Параметры.Вставить("Vector" , ВекторСкорости);
			
			Команда = Новый Соответствие;
			Команда.Вставить("Command"	 , "ACCELERATE");
			Команда.Вставить("Parameters", Параметры);
			
			ДобавитьКоманду(Команда);
			
		ИначеЕсли НомерИтерации = 7
			ИЛИ НомерИтерации = 8  Тогда
			
			Параметры = Новый Соответствие;
			Параметры.Вставить("Id"		, Корабль["Id"]);
			Параметры.Вставить("Vector"	, ВекторСкоростиТорможение);
			
			Команда = Новый Соответствие;
			Команда.Вставить("Command"	 , "ACCELERATE");
			Команда.Вставить("Parameters", Параметры);
			
			ДобавитьКоманду(Команда);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьID(Корабль)
	Возврат Корабль["Id"];
КонецФункции


Функция КорабльЖив(IDКорабля)
	
	
	Для каждого Корабль из Корабли Цикл 
		Если Строка(Корабль["Id"]) = IDКорабля Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Для каждого Враг из КораблиПротивника Цикл 
		Если Строка(Враг["Id"]) = IDКорабля Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция АктуализацияКтоКого()
	НовоеСоответствие = Новый Соответствие;
	
	Для каждого Элемент из КтоКого Цикл 
		Если КорабльЖив(Элемент.Ключ) И КорабльЖив(Элемент.Значение) Тогда 
			НовоеСоответствие.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	КтоКого = НовоеСоответствие;
КонецФункции

Функция ВрагСвободен(Id)
	
	Свободен = Истина;
	
	Для каждого Элемент из КтоКого Цикл 
		Если Элемент.Значение = Id Тогда 
			
			Свободен = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Свободен;
	
КонецФункции

Функция ПолучитьНезанятогоДохлогоВрага()
	
	minHP = 10000;
	ИскомыйВраг = Неопределено;
	
	Для каждого Враг из КораблиПротивника Цикл 
		
		Если ВрагСвободен(Строка(Враг["Id"])) Тогда
			Если Враг["Health"] < minHP Тогда 
				minHP = Враг["Health"];
				ИскомыйВраг = Враг;
			КонецЕсли;	
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ИскомыйВраг;
	
КонецФункции

Функция ПолучитьКорабльПоID(ID)
	Для каждого Корабль из Корабли Цикл 
		Если Строка(Корабль["Id"]) = СТрока(ID) Тогда 
			Возврат Корабль;
		КонецЕсли;
	КонецЦикла;
	Для каждого Враг из КораблиПротивника Цикл 
		Если Строка(Враг["Id"]) = Строка(ID) Тогда 
			Возврат Враг;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции


Функция ПолучитьСамогоДохлогВрага()
	
	minHP = 10000;
	Для каждого Враг из КораблиПротивника Цикл 
		
		Если Враг["Health"] < minHP Тогда 
			minHP = Враг["Health"];
			ИскомыйВраг = Враг;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ИскомыйВраг;
	
КонецФункции
Функция Таран()

	СреднееРасстояние = 0;	
	Для Каждого КорабльПротивника Из КораблиПротивника Цикл
		СреднееРасстояние = СреднееРасстояние + РасстояниеЧебышев(
			КораблиПротивника[0]["Position"], КорабльПротивника["Position"]);
	КонецЦикла;
	СреднееРасстояние = СреднееРасстояние / КораблиПротивника.Количество();

	Отладка.Добавить("ar_" + СреднееРасстояние);

	КоэфициентИтерацийВылета = 1;
	Если СреднееРасстояние > 8 Тогда
		КоэфициентИтерацийВылета = 0;	
	КонецЕсли;

	// КтоКого 
	АктуализацияКтоКого();
	
	МассивУскорений = Новый Массив;
	
	Для каждого Корабль из Корабли Цикл 
		
		НомерИтерацииВылета = (ПорядковыйНомер(Корабль) * 2 + 2) * КоэфициентИтерацийВылета;
		
		Если НомерИтерацииВылета > НомерИтерации Тогда 
			Продолжить;
		КонецЕсли;
		
		ID = Строка(Корабль["Id"]);
		
		Если КтоКого[ID] = Неопределено Тогда 
			
			Враг = ПолучитьНезанятогоДохлогоВрага();
			
			Если Враг = Неопределено Тогда 
				Враг = ПолучитьСамогоДохлогВрага();
			КонецЕсли;
			
			КтоКого.Вставить(ID, Строка(Враг["Id"]));
			
			
			КоординатыВрага = ПолучитьВекторКоординатКорабля(Враг);
			СкоростьВрага = ПолучитьВекторСкоростиКорабля(Враг);
			
			ПредпологаемаяТочкаВрага = НовыйВектор(КоординатыВрага.X + СкоростьВрага.X , КоординатыВрага.Y + СкоростьВрага.Y, КоординатыВрага.Z + СкоростьВрага.Z);
			
			СтруктураОтвета = Летим(Корабль, ПредпологаемаяТочкаВрага , Ложь);
			МассивУскорений.Добавить(СтруктураОтвета);
		Иначе 
			
			Враг = ПолучитьКорабльПоID(КтоКого[ID]);
			
			
			КоординатыВрага = ПолучитьВекторКоординатКорабля(Враг);
			СкоростьВрага = ПолучитьВекторСкоростиКорабля(Враг);
			
			ПредпологаемаяТочкаВрага = НовыйВектор(КоординатыВрага.X + СкоростьВрага.X , КоординатыВрага.Y + СкоростьВрага.Y, КоординатыВрага.Z + СкоростьВрага.Z);
			
			СтруктураОтвета = Летим(Корабль, ПредпологаемаяТочкаВрага , Ложь);
			МассивУскорений.Добавить(СтруктураОтвета);
		КонецЕсли;
	КонецЦикла;
	
	Анализ(МассивУскорений);
	
	
	
	
	
	
	
	
	
	// 	НомерИтерацииВылета = ПорядковыйНомер(Корабль) * 2 + 2;
	
	// 	Если НомерИтерацииВылета <= НомерИтерации Тогда 
	
	// 		ПорядковыйНомер = ПорядковыйНомер(Корабль);
	
	// 		ИндексВрага = КораблиПротивника.Количество() - ПорядковыйНомер - 1 ;
	
	// 		Если ИндексВрага < 0 Тогда 
	// 			ИндексВрага = 0 ; 
	// 		КонецЕсли;
	
	// 		Враг = КораблиПротивника[ИндексВрага];
	// 		КоординатыВрага = ПолучитьВекторКоординатКорабля(Враг);
	// 		СкоростьВрага = ПолучитьВекторСкоростиКорабля(Враг);
	
	// 		ПредпологаемаяТочкаВрага = НовыйВектор(КоординатыВрага.X + СкоростьВрага.X , КоординатыВрага.Y + СкоростьВрага.Y, КоординатыВрага.Z + СкоростьВрага.Z);
	
	// 		СтруктураОтвета = Летим(Корабль, ПредпологаемаяТочкаВрага , Ложь);
	// 		МассивУскорений.Добавить(СтруктураОтвета);
	// 		// СтруктураОтвета.Вставить("Корабль" , Корабль);
	// 		// СтруктураОтвета.Вставить("КоординатыЦели" , КоординатыЦели);
	// 		// СтруктураОтвета.Вставить("ВекторУскорения" , ВекторУскорения);
	// 	КонецЕсли;
	
	// КонецЦикла;
	
	
	
	
КонецФункции

// Процедура ДобавитьДвижение(ТаблицаДвижений,i,id,x,y,z,dx,dy,dz)

// 	НоваяСтрока = ТаблицаДвижений.Добавить();
// 	НоваяСтрока.frame = i;
// 	НоваяСтрока.id = id;
// 	НоваяСтрока.X = X + dx;
// 	НоваяСтрока.Y = Y + dy;
// 	НоваяСтрока.Z = Z + dz;

// КонецПроцедуры

// Процедура ДобавитьВсевозможныеДвижения(ТаблицаДвижений,i,id,X,Y,Z,k)

// 	ДобавитьДвижение(ТаблицаДвижений,i,id,X,Y,Z,k,0,0);
// 	ДобавитьДвижение(ТаблицаДвижений,i,id,X,Y,Z,k,0,0);
// 	ДобавитьДвижение(ТаблицаДвижений,i,id,X,Y,Z,k,0,0);
// 	ДобавитьДвижение(ТаблицаДвижений,i,id,X,Y,Z,k,0,0);
// 	ДобавитьДвижение(ТаблицаДвижений,i,id,X,Y,Z,k,0,0);

// КонецПроцедуры

Функция ПолучитьРасстояниеМеждуТочками(x1,y1,z1,x2,y2,z2)
	
	Возврат sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2));
	
КонецФункции

Функция Анализ(МассивУскорений)
	
	МассивСтопов = Новый Массив;
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("frame");
	ТаблицаДвижений.Колонки.Добавить("id");
	ТаблицаДвижений.Колонки.Добавить("X");
	ТаблицаДвижений.Колонки.Добавить("Y");
	ТаблицаДвижений.Колонки.Добавить("Z");
	
	МаксФрейм = МаксимальныйФрейм(МассивУскорений);
	
	
	Для каждого КомандаКорабль из МассивУскорений Цикл 
		
		Корабль = КомандаКорабль.Корабль;
		ВекторУскорения = НовыйВектор(КомандаКорабль.ВекторУскорения);
		КоординатыЦели = НовыйВектор(КомандаКорабль.КоординатыЦели);
		Скорость = ПолучитьВекторСкоростиКорабля(Корабль);
		Координаты = ПолучитьВекторКоординатКорабля(Корабль);
		ТочкаX = Координаты.X;
		ТочкаY = Координаты.Y;
		ТочкаZ = Координаты.Z;
		
		КонечнаяСкоростьX = (Скорость.X + ВекторУскорения.X);
		КонечнаяСкоростьY = (Скорость.Y + ВекторУскорения.Y);
		КонечнаяСкоростьZ = (Скорость.Z + ВекторУскорения.Z);
		
		
		i = 1 ; 
		X = Неопределено;
		Y = Неопределено;
		Z = Неопределено;
		Отказ = Ложь;
		
		Пока i <= МаксФрейм Цикл 
			
			Если КонечнаяСкоростьX > 0 Тогда 
				X = Координаты.X + i;
				КонечнаяСкоростьX = КонечнаяСкоростьX - 1;
			КонецЕсли;
			Если КонечнаяСкоростьX < 0 Тогда 
				X = Координаты.X - i;
				КонечнаяСкоростьX = КонечнаяСкоростьX + 1;
			КонецЕсли;
			
			Если КонечнаяСкоростьY > 0 Тогда 
				Y = Координаты.Y + i;
				КонечнаяСкоростьY = КонечнаяСкоростьY - 1;
			КонецЕсли;
			Если КонечнаяСкоростьY < 0 Тогда 
				Y = Координаты.Y - i;
				КонечнаяСкоростьY = КонечнаяСкоростьY + 1;
			КонецЕсли;
			
			Если КонечнаяСкоростьZ > 0 Тогда 
				Z = Координаты.Z + i;
				КонечнаяСкоростьZ = КонечнаяСкоростьZ - 1;
			КонецЕсли;
			Если КонечнаяСкоростьZ < 0 Тогда 
				Z = Координаты.Z - i;
				КонечнаяСкоростьZ = КонечнаяСкоростьZ + 1;
			КонецЕсли;
			
			X = ?(X = Неопределено, Координаты.X , X);
			Y = ?(Y = Неопределено, Координаты.Y , Y);
			Z = ?(Z = Неопределено, Координаты.Z , Z);
			
			// -----------------------------------------
			
			Для каждого Строка из ТаблицаДвижений Цикл 
				
				Если Строка.Id <> Корабль["Id"] И
					Строка.frame = i Тогда
					
					Расстояние = ПолучитьРасстояниеМеждуТочками(X,Y,Z,Строка.X,Строка.Y,Строка.Z);
					Если Расстояние <=3 Тогда
						Отказ = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Отказ = Истина Тогда 
				
				СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
				
				Для каждого строка из СтрОтбора Цикл 
					ТаблицаДвижений.Удалить(строка);
				КонецЦикла;
				
				// СтруктураСтопов = новый Структура;
				// СтруктураСтопов.Вставить("Корабль" , Корабль);
				// СтруктураСтопов.Вставить("КоординатыЦели" , КоординатыЦели);
				// СтруктураСтопов.Вставить("ВекторУскорения" , ВекторУскорения);
				
				ВекторТорможения = ПолучитьВекторМаксимальногоТорможения(Корабль);
				Если КритичноеУскорение(Корабль, ВекторТорможения) Тогда 
					ВекторТорможения = ПолучитьВекторДляОстановкиКорабля(Корабль);
				КонецЕсли;
				// МассивСтопов.Добавить(СтруктураСтопов);
				Прервать;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.frame = i;
			НоваяСтрока.id = Корабль["Id"];
			НоваяСтрока.X = X;
			НоваяСтрока.Y = Y;
			НоваяСтрока.Z = Z;
			
			
			
			
			i= i+ 1;
			
		КонецЦикла;
		Если НЕ Отказ Тогда 
			ДобавитьКоманду(Ускорение(Корабль, ВекторУскорения));
		Иначе 
			ДобавитьКоманду(Ускорение(Корабль, ВекторТорможения));
		КонецЕсли;
	КонецЦикла;
	
	
	// СтруктураОтвета.Вставить("Корабль" , Корабль);
	
	// СтруктураОтвета.Вставить("КоординатыЦели" , КоординатыЦели);
	
	// СтруктураОтвета.Вставить("ВекторУскорения" , ВекторУскорения);
	
	//МассивУскорений ; 
	
	
	
	Для каждого эл из МассивСтопов Цикл 
		
		Корабль = эл.Корабль;
		КоординатыЦели = эл.КоординатыЦели;
		ВекторУскорения = эл.ВекторУскорения;
		
		Скорость = ПолучитьВекторСкоростиКорабля(Корабль);
		Координаты = ПолучитьВекторКоординатКорабля(Корабль);
		
		X = Неопределено;
		Y = Неопределено;
		Z = Неопределено;
		
		k = -2;
		Пока k<=2 Цикл 
			Если ВекторУскорения.X < 0 Тогда
				
				ТестоваяСкорость = НовыйВектор(Скорость.X - k , Скорость.Y, Скорость.Z);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = Строка(-k) + "/0/0";
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X - k , Скорость.Y + k, Скорость.Z);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = Строка(-k) + "/" +Строка(k) + "/0";
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X - k , Скорость.Y, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = Строка(-k) + "/" +Строка(k) + "/" +Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X - k , Скорость.Y + k, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = Строка(k) + "/" +Строка(k) + "/" +Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе 
				
				ТестоваяСкорость = НовыйВектор(Скорость.X + k , Скорость.Y, Скорость.Z);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = Строка(k) + "/0/0";
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X  + k, Скорость.Y + k, Скорость.Z);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = Строка(k) + "/" + Строка(k)+"/0";
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X  + k, Скорость.Y, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = Строка(k) + "/0/" + Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X  + k, Скорость.Y + k, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = Строка(k) + "/"+Строка(k)+"/" + Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВекторУскорения.Y < 0 Тогда
				
				ТестоваяСкорость = НовыйВектор(Скорость.X, Скорость.Y - k, Скорость.Z);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = "0/"+Строка(-k)+"/0";
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				
				
				ТестоваяСкорость = НовыйВектор(Скорость.X - k , Скорость.Y - k, Скорость.Z);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = Строка(-k) + "/"+Строка(-k)+"/0";
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				
				ТестоваяСкорость = НовыйВектор(Скорость.X , Скорость.Y - k, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = "0/"+Строка(-k)+"/" + Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X - k, Скорость.Y - k, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = Строка(-k) + "/"+Строка(-k)+"/" + Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
			Иначе 
				
				ТестоваяСкорость = НовыйВектор(Скорость.X, Скорость.Y + k, Скорость.Z);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = "0/"+Строка(k)+"/0";
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X + k, Скорость.Y + k, Скорость.Z);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор = Строка(k) + "/"+Строка(k)+"/0";
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X, Скорость.Y + k, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор =  "0/"+Строка(k)+"/" + Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X + k, Скорость.Y + k, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор =  Строка(k) + "/"+Строка(k)+"/" + Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВекторУскорения.Z < 0 Тогда
				
				ТестоваяСкорость = НовыйВектор(Скорость.X, Скорость.Y, Скорость.Z - k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор =  "0/0/" + Строка(-k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X, Скорость.Y + k, Скорость.Z - k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор =  "0/" +Строка(k) +"/" + Строка(-k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				ТестоваяСкорость = НовыйВектор(Скорость.X - k, Скорость.Y, Скорость.Z - k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор =  Строка(-k) + "/0/" + Строка(-k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X - k, Скорость.Y + k, Скорость.Z - k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор =  Строка(-k) + "/"+ Строка(k) + "/" + Строка(-k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				
			Иначе 
				
				ТестоваяСкорость = НовыйВектор(Скорость.X, Скорость.Y, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор =  "0/0/" + Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X, Скорость.Y + k, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор =  "0/" + Строка(k) + "/" + Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X + k, Скорость.Y, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор =  Строка(k) + "/0/" + Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТестоваяСкорость = НовыйВектор(Скорость.X + k, Скорость.Y + k, Скорость.Z + k);
				Если не КритичнаяСкорость(Корабль, ТестоваяСкорость) Тогда 
					
					Если НЕ ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм) Тогда 
						
						НайденныйВектор =  Строка(k) + "/" + Строка(k)+ "/" + Строка(k);
						
						СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
						
						Для каждого строка из СтрОтбора Цикл 
							ТаблицаДвижений.Удалить(строка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			
			k= k + 1 ;
		КонецЦикла;
		
		
		Если НайденныйВектор = Неопределено Тогда 
			НайденныйВектор = ПолучитьВекторДляОстановкиКорабля(Корабль);
		КонецЕсли;
		
		НайденныйВектор = НовыйВектор(НайденныйВектор);
		ДобавитьКоманду(Ускорение(Корабль,НайденныйВектор));
		ВекторУскорения = НайденныйВектор;
		
		ТочкаX = Координаты.X;
		ТочкаY = Координаты.Y;
		ТочкаZ = Координаты.Z;
		
		КонечнаяСкоростьX = (Скорость.X + ВекторУскорения.X);
		КонечнаяСкоростьY = (Скорость.Y + ВекторУскорения.Y);
		КонечнаяСкоростьZ = (Скорость.Z + ВекторУскорения.Z);
		
		
		i = 1 ; 
		X = Неопределено;
		Y = Неопределено;
		Z = Неопределено;
		
		Пока i <= МаксФрейм Цикл 
			
			Если КонечнаяСкоростьX > 0 Тогда 
				X = Координаты.X + i;
				КонечнаяСкоростьX = КонечнаяСкоростьX - 1;
			КонецЕсли;
			Если КонечнаяСкоростьX < 0 Тогда 
				X = Координаты.X - i;
				КонечнаяСкоростьX = КонечнаяСкоростьX + 1;
			КонецЕсли;
			
			Если КонечнаяСкоростьY > 0 Тогда 
				Y = Координаты.Y + i;
				КонечнаяСкоростьY = КонечнаяСкоростьY - 1;
			КонецЕсли;
			Если КонечнаяСкоростьY < 0 Тогда 
				Y = Координаты.Y - i;
				КонечнаяСкоростьY = КонечнаяСкоростьY + 1;
			КонецЕсли;
			
			Если КонечнаяСкоростьZ > 0 Тогда 
				Z = Координаты.Z + i;
				КонечнаяСкоростьZ = КонечнаяСкоростьZ - 1;
			КонецЕсли;
			Если КонечнаяСкоростьZ < 0 Тогда 
				Z = Координаты.Z - i;
				КонечнаяСкоростьZ = КонечнаяСкоростьZ + 1;
			КонецЕсли;
			
			X = ?(X = Неопределено, Координаты.X , X);
			Y = ?(Y = Неопределено, Координаты.Y , Y);
			Z = ?(Z = Неопределено, Координаты.Z , Z);
			
			// -----------------------------------------
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.frame = i;
			НоваяСтрока.id = Корабль["Id"];
			НоваяСтрока.X = X;
			НоваяСтрока.Y = Y;
			НоваяСтрока.Z = Z;
			// Запас 3 кубик 
			k = -3; 
			Пока k<=3 Цикл
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.frame = i;
				НоваяСтрока.id = Корабль["Id"];
				НоваяСтрока.X = X + k;
				НоваяСтрока.Y = Y;
				НоваяСтрока.Z = Z;
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.frame = i;
				НоваяСтрока.id = Корабль["Id"];
				НоваяСтрока.X = X;
				НоваяСтрока.Y = Y + k;
				НоваяСтрока.Z = Z;
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.frame = i;
				НоваяСтрока.id = Корабль["Id"];
				НоваяСтрока.X = X;
				НоваяСтрока.Y = Y;
				НоваяСтрока.Z = Z + k;
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.frame = i;
				НоваяСтрока.id = Корабль["Id"];
				НоваяСтрока.X = X + k;
				НоваяСтрока.Y = Y + k;
				НоваяСтрока.Z = Z;
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.frame = i;
				НоваяСтрока.id = Корабль["Id"];
				НоваяСтрока.X = X;
				НоваяСтрока.Y = Y + k;
				НоваяСтрока.Z = Z + k;
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.frame = i;
				НоваяСтрока.id = Корабль["Id"];
				НоваяСтрока.X = X + k;
				НоваяСтрока.Y = Y;
				НоваяСтрока.Z = Z + k;
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.frame = i;
				НоваяСтрока.id = Корабль["Id"];
				НоваяСтрока.X = X + k;
				НоваяСтрока.Y = Y + k;
				НоваяСтрока.Z = Z;
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.frame = i;
				НоваяСтрока.id = Корабль["Id"];
				НоваяСтрока.X = X;
				НоваяСтрока.Y = Y + k;
				НоваяСтрока.Z = Z + k;
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.frame = i;
				НоваяСтрока.id = Корабль["Id"];
				НоваяСтрока.X = X + k;
				НоваяСтрока.Y = Y + k;
				НоваяСтрока.Z = Z + k;
				
				k=k+1;
			КонецЦикла;
			
			
			
			i= i+ 1;
			
		КонецЦикла;
		
		
	КонецЦикла;
	
	// ТаблицаДвижений 
	
	Отладка.Добавить(ПарсерJSON.записатьJSON(Ответ));
	
	
	
КонецФункции

Функция ЕстьСовпаденияВТаблицеДвижений(Корабль, ТестоваяСкорость, ТаблицаДвижений, МаксФрейм)
	
	i = 1 ; 
	X = Неопределено;
	Y = Неопределено;
	Z = Неопределено;
	Отказ = Ложь;
	
	Координаты = ПолучитьВекторКоординатКорабля(Корабль);
	
	КонечнаяСкоростьX = ТестоваяСкорость.X;
	КонечнаяСкоростьY = ТестоваяСкорость.Y;
	КонечнаяСкоростьZ = ТестоваяСкорость.Z;
	
	
	Пока i <= МаксФрейм Цикл 
		
		Если КонечнаяСкоростьX > 0 Тогда 
			X = Координаты.X + i;
			КонечнаяСкоростьX = КонечнаяСкоростьX - 1;
		КонецЕсли;
		Если КонечнаяСкоростьX < 0 Тогда 
			X = Координаты.X - i;
			КонечнаяСкоростьX = КонечнаяСкоростьX + 1;
		КонецЕсли;
		
		Если КонечнаяСкоростьY > 0 Тогда 
			Y = Координаты.Y + i;
			КонечнаяСкоростьY = КонечнаяСкоростьY - 1;
		КонецЕсли;
		Если КонечнаяСкоростьY < 0 Тогда 
			Y = Координаты.Y - i;
			КонечнаяСкоростьY = КонечнаяСкоростьY + 1;
		КонецЕсли;
		
		Если КонечнаяСкоростьZ > 0 Тогда 
			Z = Координаты.Z + i;
			КонечнаяСкоростьZ = КонечнаяСкоростьZ - 1;
		КонецЕсли;
		Если КонечнаяСкоростьZ < 0 Тогда 
			Z = Координаты.Z - i;
			КонечнаяСкоростьZ = КонечнаяСкоростьZ + 1;
		КонецЕсли;
		
		X = ?(X = Неопределено, Координаты.X , X);
		Y = ?(Y = Неопределено, Координаты.Y , Y);
		Z = ?(Z = Неопределено, Координаты.Z , Z);
		
		// -----------------------------------------
		
		Для каждого Строка из ТаблицаДвижений Цикл 
			Если Строка.Id <> Корабль["Id"] И
				Строка.frame = i И 
				Строка.X = X И 
				Строка.Y = Y И 
				Строка.Z = Z Тогда 
				
				
				Отказ = Истина;
				Прервать;
				//ОтправитьНаПересчет
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ = Истина Тогда 
			СтрОтбора = ТаблицаДвижений.НайтиСтроки(Новый Структура("id" , Корабль["Id"]));
			
			Для каждого строка из СтрОтбора Цикл 
				ТаблицаДвижений.Удалить(строка);
			КонецЦикла;
			Возврат Истина;
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.frame = i;
		НоваяСтрока.id = Корабль["Id"];
		НоваяСтрока.X = X;
		НоваяСтрока.Y = Y;
		НоваяСтрока.Z = Z;
		// Запас 3 кубик 
		k = -3; 
		Пока k<=3 Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.frame = i;
			НоваяСтрока.id = Корабль["Id"];
			НоваяСтрока.X = X + k;
			НоваяСтрока.Y = Y;
			НоваяСтрока.Z = Z;
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.frame = i;
			НоваяСтрока.id = Корабль["Id"];
			НоваяСтрока.X = X;
			НоваяСтрока.Y = Y + k;
			НоваяСтрока.Z = Z;
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.frame = i;
			НоваяСтрока.id = Корабль["Id"];
			НоваяСтрока.X = X;
			НоваяСтрока.Y = Y;
			НоваяСтрока.Z = Z + k;
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.frame = i;
			НоваяСтрока.id = Корабль["Id"];
			НоваяСтрока.X = X + k;
			НоваяСтрока.Y = Y + k;
			НоваяСтрока.Z = Z;
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.frame = i;
			НоваяСтрока.id = Корабль["Id"];
			НоваяСтрока.X = X;
			НоваяСтрока.Y = Y + k;
			НоваяСтрока.Z = Z + k;
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.frame = i;
			НоваяСтрока.id = Корабль["Id"];
			НоваяСтрока.X = X + k;
			НоваяСтрока.Y = Y;
			НоваяСтрока.Z = Z + k;
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.frame = i;
			НоваяСтрока.id = Корабль["Id"];
			НоваяСтрока.X = X + k;
			НоваяСтрока.Y = Y + k;
			НоваяСтрока.Z = Z;
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.frame = i;
			НоваяСтрока.id = Корабль["Id"];
			НоваяСтрока.X = X;
			НоваяСтрока.Y = Y + k;
			НоваяСтрока.Z = Z + k;
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.frame = i;
			НоваяСтрока.id = Корабль["Id"];
			НоваяСтрока.X = X + k;
			НоваяСтрока.Y = Y + k;
			НоваяСтрока.Z = Z + k;
			
			k=k+1;
		КонецЦикла;
		
		
		
		i= i+ 1;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция МаксимальныйФрейм(МассивУскорений)
	
	МаксФрейм = 0;
	
	Для каждого КомандаКорабль из МассивУскорений Цикл 
		
		Корабль = КомандаКорабль.Корабль;
		ВекторУскорения = КомандаКорабль.ВекторУскорения;
		Скорость = ПолучитьВекторСкоростиКорабля(Корабль);
		
		КонечнаяСкоростьX = МодульЧисла(Скорость.X + ВекторУскорения.X);
		КонечнаяСкоростьY = МодульЧисла(Скорость.Y + ВекторУскорения.Y);
		КонечнаяСкоростьZ = МодульЧисла(Скорость.Z + ВекторУскорения.Z);
		МаксСкорость = Макс(КонечнаяСкоростьX, КонечнаяСкоростьY, КонечнаяСкоростьZ);
		
		Если МаксФрейм < МаксСкорость Тогда
			МаксФрейм = МаксСкорость;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МаксФрейм;
	
КонецФункции

Функция ГСЧ()
	Если НомерИтерации % 2 = 0 Тогда 
		Возврат 1;
	Иначе 
		Возврат -1;
	КонецЕсли;
КонецФункции	



Функция ПорядковыйНомер(Корабль)
	ПорядковыйНомер = Число(Корабль["Id"]);
	Если ПорядковыйНомер >= 10000 Тогда
		ПорядковыйНомер = ПорядковыйНомер - 10000;
		Возврат ПорядковыйНомер;
	КонецЕсли;
	
	Возврат ПорядковыйНомер;
КонецФункции


Функция ПостроитсяОтносительноТочки(Точка)
	КоординатыЦели = НовыйВектор(Точка);
	
	Для каждого Корабль из Корабли Цикл 
		Если ПорядковыйНомер(Корабль) = 0 Тогда 
			Летим(Корабль, НовыйВектор(КоординатыЦели.X - 6 , КоординатыЦели.Y, КоординатыЦели.Z),Истина);
		КонецЕсли;
		Если ПорядковыйНомер(Корабль) = 1 Тогда 
			Летим(Корабль, НовыйВектор(КоординатыЦели.X - 3 , КоординатыЦели.Y, КоординатыЦели.Z),Истина);
		КонецЕсли;
		Если ПорядковыйНомер(Корабль) = 2 Тогда 
			Летим(Корабль, НовыйВектор(КоординатыЦели.X , КоординатыЦели.Y, КоординатыЦели.Z),Истина);
		КонецЕсли;
		Если ПорядковыйНомер(Корабль) = 3 Тогда 
			Летим(Корабль, НовыйВектор(КоординатыЦели.X + 3, КоординатыЦели.Y, КоординатыЦели.Z),Истина);
		КонецЕсли;
		Если ПорядковыйНомер(Корабль) = 4 Тогда 
			Летим(Корабль, НовыйВектор(КоординатыЦели.X + 6 , КоординатыЦели.Y, КоординатыЦели.Z),Истина);
		КонецЕсли;
		Если ПорядковыйНомер(Корабль) = 5 Тогда 
			В = НовыйВектор(КоординатыЦели.X + 9 , КоординатыЦели.Y, КоординатыЦели.Z);
			Отладка.Добавить("#5: T: " + ВекторСтрокой(В) + " K: " + ВекторСтрокой(ПолучитьВекторКоординатКорабля(Корабль)) + " V: " + ВекторСтрокой(ПолучитьВекторСкоростиКорабля(Корабль)) );
			Летим(Корабль,В,Истина);
			
		КонецЕсли;
	КонецЦикла
КонецФункции

Функция Змея()
	
	НомерИтерацииДвижение = НомерИтерацииДвижение + 1;	
	
	Для каждого Корабль из Корабли Цикл 
		
		ВекторСкоростиКорабля     = ПолучитьВекторСкоростиКорабля(Корабль);
		ВекторКоординатКорабля    = ПолучитьВекторКоординатКорабля(Корабль);
		РазмерКартыДляКорабля     = 24;
		РазмерКартыДляКорабляНоль = 4;
		
		ПорядокХода  = (НомерИтерацииДвижение % 6 );
		МодификаторX = 0;
		Если ПорядокХода <= 2 Тогда
			//МодификаторX = 1;	
		ИначеЕсли ПорядокХода > 2 Тогда
			//МодификаторX = -1;	
		КонецЕсли;
		
		// движение в Y 0
		
		Если ВекторКоординатКорабля.Z = РазмерКартыДляКорабля 
			И ВекторКоординатКорабля.Y <> РазмерКартыДляКорабляНоль Тогда
			
			Летим(Корабль, НовыйВектор(ВекторКоординатКорабля.X + МодификаторX, РазмерКартыДляКорабляНоль, ВекторКоординатКорабля.Z));
			
		ИначеЕсли ВекторКоординатКорабля.Y = РазмерКартыДляКорабляНоль
			И ВекторКоординатКорабля.Z <> РазмерКартыДляКорабляНоль Тогда
			
			Летим(Корабль, НовыйВектор(ВекторКоординатКорабля.X + МодификаторX, ВекторКоординатКорабля.Y, РазмерКартыДляКорабляНоль));
			
		ИначеЕсли ВекторКоординатКорабля.Z = РазмерКартыДляКорабляНоль
			И ВекторКоординатКорабля.Y <> РазмерКартыДляКорабля тогда 
			
			Летим(Корабль, НовыйВектор(ВекторКоординатКорабля.X + МодификаторX, РазмерКартыДляКорабля, ВекторКоординатКорабля.Z));
			
		ИначеЕсли ВекторКоординатКорабля.Y = РазмерКартыДляКорабля
			И ВекторКоординатКорабля.Z <> РазмерКартыДляКорабля Тогда
			
			Летим(Корабль, НовыйВектор(ВекторКоординатКорабля.X + МодификаторX, ВекторКоординатКорабля.Y, РазмерКартыДляКорабля));
			
		Иначе 
			Дрейф(Корабль);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

/////////////////////////////////////////////////////
// Сценарии Драфта

Процедура ДрафтПоУмолчанию()
	
	ОстатокДенег     = Состояние["Money"];
	ВсегоКораблей    = Состояние["MaxShipsCount"];
	Корабль    		 = СобраныйКорабль("forward");
	КорабльСкаут     = СобраныйКорабль("scout");
	Количество 		 = ВсегоКораблей;
	КоличествоСкаут  = 0;
	СтоимостьДрафта  = Количество * Корабль["Price"] + КоличествоСкаут * КорабльСкаут["Price"];
	
	// Расчет количества кораблей					   
	
	ТипыКораблей = Новый Массив;
	ТипыКораблей.Добавить("forward");
	ТипыКораблей.Добавить("scout");
	
	КоличествоТиповКораблей = Новый Соответствие;
	КоличествоТиповКораблей.Вставить("forward", 0);
	КоличествоТиповКораблей.Вставить("scout"  , 0);
	
	ВсегоВыбраноКораблей = 0;
	
	Для Каждого Элемент Из ТипыКораблей Цикл
		Корабль = СобраныйКорабль(Элемент);  
		Пока ОстатокДенег >= Корабль["Price"] Цикл
			Если ВсегоВыбраноКораблей = Состояние["MaxShipsCount"] Тогда
				Прервать;
			КонецЕсли;
			ОстатокДенег 		 = ОстатокДенег - Корабль["Price"];
			ВсегоВыбраноКораблей = ВсегоВыбраноКораблей + 1;
			Количество 			 = КоличествоТиповКораблей[Элемент] + 1;
			КоличествоТиповКораблей.Вставить(Элемент, Количество);
		КонецЦикла;	
	КонецЦикла;
	
	// Расчет расстановки кораблей
	
	Для Каждого Элемент Из КоличествоТиповКораблей Цикл 
		Для Сч = 1 По Элемент.Значение Цикл
			ДобавитьКоманду(
			ВыборКорабля(Элемент.Ключ, NULL)
		);
	КонецЦикла
КонецЦикла;

КонецПроцедуры

Процедура ДрафтДляЗмеи()
	
	СборкаКорабля = СобратьКорабль("big_energy, big_health, big_health, giant_blaster, big_engine, big_heal");
	
	РазмерКарты    = Состояние["MapSize"];	
	МассивКораблей = Новый Массив;
	
	Если Состояние["PlayerId"] = 0 Тогда 
		КоординатаY = "0";
		КоординатаZ = "4";
	Иначе
		КоординатаY = "28";
		КоординатаZ = "24";	
	КонецЕсли;
	
	ВыбратьКорабль(СборкаКорабля["Id"], "4/"  + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	ВыбратьКорабль(СборкаКорабля["Id"], "6/"  + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	ВыбратьКорабль(СборкаКорабля["Id"], "8/"  + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	ВыбратьКорабль(СборкаКорабля["Id"], "10/" + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	ВыбратьКорабль(СборкаКорабля["Id"], "12/" + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	ВыбратьКорабль(СборкаКорабля["Id"], "14/" + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	
КонецПроцедуры

Функция СобратьКорабльТарана(КоличествоБлоковЗДоровья, МаксимальноеУскорениеДвигателя, КоличествоНосов)
	
	i = 1;
	СтрокаМодулейЗдоровья = "";
	Пока i<=КоличествоБлоковЗДоровья Цикл
		СтрокаМодулейЗдоровья = СтрокаМодулейЗдоровья + ", big_health";
		i = i + 1;
	КонецЦикла;
	
	СтрокаМодулейДвигателя = "";
	
	Если МаксимальноеУскорениеДвигателя = 2 Тогда
		СтрокаМодулейДвигателя = "giant_engine";
	Иначе
		СтрокаМодулейДвигателя = "big_engine";
	КонецЕсли;
	
	i = 1;
	СтрокаМодулейНоса = "";
	Пока i<=КоличествоНосов Цикл
		СтрокаМодулейНоса = СтрокаМодулейНоса + ", big_nose";
		i = i + 1;
	КонецЦикла;
	
	СтрокаСборки = Сред(СтрокаМодулейЗдоровья, 2) + ", " + СтрокаМодулейДвигателя + ", " + Сред(СтрокаМодулейНоса, 2);
	
	
	Возврат СобратьКорабль(СтрокаСборки);
	
КонецФункции


Процедура ДрафтТаран()
	РазмерКарты    = Состояние["MapSize"];	
	
	Корабль1 = СобратьКорабльТарана(2, 2, 2);  //  X - количество блоков здоровья , Y - максимальное ускорение двигателя , Z - количество носов
	Корабль2 = СобратьКорабльТарана(1, 1, 2); 
	
	Если Состояние["PlayerId"] = 0 Тогда 
		КоординатаY = "0";
		КоординатаZ = "0";
	Иначе
		КоординатаY = "28";
		КоординатаZ = "28";	
	КонецЕсли;
	// 6 штук Корабль 1 
	ВыбратьКорабль(Корабль1["Id"], "0/" + КоординатаY + "/" + КоординатаZ, Корабль1["Equipment"]);
	ВыбратьКорабль(Корабль1["Id"], "5/" + КоординатаY + "/" + КоординатаZ, Корабль1["Equipment"]);
	ВыбратьКорабль(Корабль1["Id"], "10/" + КоординатаY + "/" + КоординатаZ, Корабль1["Equipment"]);
	ВыбратьКорабль(Корабль1["Id"], "15/" + КоординатаY + "/" + КоординатаZ, Корабль1["Equipment"]);
	ВыбратьКорабль(Корабль1["Id"], "20/" + КоординатаY + "/" + КоординатаZ, Корабль1["Equipment"]);
	ВыбратьКорабль(Корабль1["Id"], "25/" + КоординатаY + "/" + КоординатаZ, Корабль1["Equipment"]);
	//1 штука Корабль 2 
	ВыбратьКорабль(Корабль2["Id"], "28/" + КоординатаY + "/" + КоординатаZ, Корабль2["Equipment"]);	
	
КонецПроцедуры

Процедура ДрафтПодвижногоКуба()
	
	СборкаКорабля = СобратьКорабль("giant_engine, big_health, big_nose, big_nose, big_nose");
	
	РазмерКарты    = Состояние["MapSize"];	
	МассивКораблей = Новый Массив;
	
	Если Состояние["PlayerId"] = 0 Тогда 
		КоординатаY = "0";
		КоординатаZ = "0";
	Иначе
		КоординатаY = "28";
		КоординатаZ = "28";	
	КонецЕсли;
	
	ВыбратьКорабль(СборкаКорабля["Id"], "0/"  + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	ВыбратьКорабль(СборкаКорабля["Id"], "3/"  + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	ВыбратьКорабль(СборкаКорабля["Id"], "6/"  + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	ВыбратьКорабль(СборкаКорабля["Id"], "9/" + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	ВыбратьКорабль(СборкаКорабля["Id"], "12/" + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	ВыбратьКорабль(СборкаКорабля["Id"], "15/" + КоординатаY+"/"+КоординатаZ, СборкаКорабля["Equipment"]);
	
КонецПроцедуры

/////////////////////////////////////////////////////
// Стрельба
// 1. Расчитать таблицу для системы принятия решений, таблица содежит показатели доступности 
//	  и иные характеристикии для принятия решения
//	  - Инцииализировать коллекцию структруы (....)
//	  Для Каждого противника
//    - Расчитать доступность, как минимальное расстояние между ячейками кораблей не превышающее радиус поражения
//	  - 	Иначе продолжить
//	  - Расчитать лучи брезенхема для каждой точки внутри радиуса поражения, для иных точек (сформулированых эвистически)
//			Учитвая факт, что мы стрляем из ближайшей точки корабля к выбранной для поражения точки
//	  - Расчитать доступность точки, как луч пересекает противника (любого, цель) и не пересекает союзника
//	  - 	Иначе продолжить
//	  - Заполнить иные показатели для системы принятия решений (здоровье, скорость)
//
// Результом является коллекция, содержащая набор точек для стрельбы, гарантировано доступных, пересекающих противников и не пересекающих союзников
//
// 2. Принятие решения
//	Для Каждого Корабля
//	- Получить достпных себе противников
//  - Анализировать их достпность для товарищей
//	- Анализировать их иные характеристики
//	- Выбрать точку для стрельбы из достпных
//	- Принять решение

Процедура Отстреляться()
	
	// Приминение вооружения
	
	СценарииСтрельбы = РасчитатьСценарииСтрельбы();
	ПриоритетныеЦели = ПриоритетныеЦели(СценарииСтрельбы);
	
	Для Каждого Корабль Из Корабли Цикл
		
		СценарииСтрельбыКорабля = ВыбратьСценарииСтрельбыКорабля(Корабль, ПриоритетныеЦели, СценарииСтрельбы);
		Если СценарииСтрельбыКорабля.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СценарииСтрельбыКорабля.Сортировать("ПопаданияВПротивника Убыв, ПопаданияВПротивников Убыв, ВыстрелРасстояние, КорабльПротивникаСкоростьЗначение");
		
		ВыбраныйВыстрел = СценарииСтрельбыКорабля[0];
		
		Отладка.Добавить("st_" + 
		ВыбраныйВыстрел.КорабльИдентификатор + "-" + 
		ВыбраныйВыстрел.КорабльПротивникаИдентификатор + "-" + 
		ВекторСтрокой(ВыбраныйВыстрел.КорабльПротивникаПозиция));
		
		Для Каждого Орудие Из ОрудияКорабля(Корабль) Цикл
			Выстрел = Выстрел(Корабль, ВыбраныйВыстрел.ВыстрелТочка, Орудие);
			ДобавитьКоманду(Выстрел);
		КонецЦикла;
		
	КонецЦикла;
	
	// Приминение Аптечек
	
	СценарииИсцеления = РасчитатьСценарииИсцеления(); 
	
	Для Каждого Корабль Из Корабли Цикл
		
		СценарииИсцеленияКорабля = ВыбратьСценарииИсцеленияКорабля(Корабль, СценарииИсцеления);
		Если СценарииИсцеленияКорабля.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СценарииИсцеленияКорабля.Сортировать("ИсцелениеПолезное Убыв");
		
		ВыбраныйВыстрел = СценарииИсцеленияКорабля[0];		
		
		Отладка.Добавить("heal_" + 
		ВыбраныйВыстрел.КорабльИдентификатор + "-" + 
		ВыбраныйВыстрел.КорабльСоюзникаИдентификатор + "-" + 
		ВекторСтрокой(ВыбраныйВыстрел.КорабльСоюзникаПозиция));
		
		Для Каждого Аптечка Из АптечкиКорабля(Корабль) Цикл
			Выстрел = Выстрел(Корабль, ВыбраныйВыстрел.ВыстрелТочка, Аптечка);
			ДобавитьКоманду(Выстрел);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыбратьСценарииИсцеленияКорабля(Корабль, СценарииИсцеления)
	
	Отбор = Новый Структура("КорабльИдентификатор");
	Отбор.КорабльИдентификатор = Корабль["Id"];
	
	СценарииИсцеленияКорабля = СценарииИсцеления.Скопировать(Отбор);
	
	Возврат СценарииИсцеленияКорабля; 
	
КонецФункции

Функция ВыбратьСценарииСтрельбыКорабля(Корабль, ПриоритетныеЦелиГлобальные, СценарииСтрельбы)
	
	Отбор = Новый Структура("КорабльИдентификатор, КорабльПротивникаИдентификатор");
	Отбор.КорабльИдентификатор = Корабль["Id"];
	
	// Поиск глобальных целей в сценариях
	
	СценарииСтрельбыКорабляГлобальные = СценарииСтрельбы.СкопироватьКолонки();
	
	Для Каждого Цель Из ПриоритетныеЦелиГлобальные Цикл		
		
		Отбор.КорабльПротивникаИдентификатор = Цель["Id"];
		
		СценарииСтрельбыКорабляГлобальные = СценарииСтрельбы.Скопировать(Отбор);		
		Если СценарииСтрельбыКорабляГлобальные.Количество() <> 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СценарииСтрельбыКорабляГлобальные.Количество() <> 0 Тогда
		Возврат СценарииСтрельбыКорабляГлобальные;
	КонецЕсли;
	
	// Поиск локальных целей
	
	СценарииСтрельбыКорабляЛокальные = СценарииСтрельбы.СкопироватьКолонки();	
	
	Для Каждого Цель Из ПриоритетныеЦелиКорабля(Корабль, СценарииСтрельбы) Цикл		
		
		Отбор.КорабльПротивникаИдентификатор = Цель["Id"];
		
		СценарииСтрельбыКорабляЛокальные = СценарииСтрельбы.Скопировать(Отбор);		
		Если СценарииСтрельбыКорабляЛокальные.Количество() <> 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СценарииСтрельбыКорабляЛокальные.Количество() <> 0 Тогда
		Возврат СценарииСтрельбыКорабляЛокальные;
	КонецЕсли;
	
	// Выбор из доступных целей
	
	Отбор.Удалить("КорабльПротивникаИдентификатор");
	
	СценарииСтрельбыКорабля = СценарииСтрельбы.Скопировать(Отбор);
	
	Возврат СценарииСтрельбыКорабля; 
	
КонецФункции

Функция ПриоритетныеЦели(СценарииСтрельбы)
	
	ПриоритетныеЦели = Новый Массив;
	
	// Функция возвращает массив кораблей противника, отсортированый в порядке приоритета
	
	ПоказателиПриоритетнойЦели = Новый ТаблицаЗначений;
	ПоказателиПриоритетнойЦели.Колонки.Добавить("КорабльПротивника");
	ПоказателиПриоритетнойЦели.Колонки.Добавить("КорабльПротивникаИдентификатор");
	ПоказателиПриоритетнойЦели.Колонки.Добавить("КорабльПротивникаЗдоровье");
	ПоказателиПриоритетнойЦели.Колонки.Добавить("КорабльПротивникаСкорость");
	ПоказателиПриоритетнойЦели.Колонки.Добавить("ДоступенСоюзникам");
	
	// Расчет показателей принятия решения, приоритетная цель
	
	Для Каждого Корабль Из КораблиПротивника Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("КорабльПротивникаИдентификатор", Корабль["Id"]);
		
		ДостпностьСоюзникам = СценарииСтрельбы.Скопировать(Отбор, "КорабльИдентификатор");	
		ДостпностьСоюзникам.Свернуть("КорабльИдентификатор");
		
		НоваяСтрока = ПоказателиПриоритетнойЦели.Добавить();
		НоваяСтрока.КорабльПротивника 			   = Корабль;
		НоваяСтрока.КорабльПротивникаИдентификатор = Корабль["Id"];
		НоваяСтрока.КорабльПротивникаЗдоровье 	   = Корабль["Health"];
		НоваяСтрока.КорабльПротивникаСкорость 	   = СкоростьКорабля(Корабль);
		НоваяСтрока.ДоступенСоюзникам 			   = ДостпностьСоюзникам.Количество();
		
	КонецЦикла;
	
	ПоказателиПриоритетнойЦели.Сортировать("ДоступенСоюзникам Убыв");
	
	// Указываем цель, как глобальную если она доступна всем кроме одного союзника
	
	Если ПоказателиПриоритетнойЦели[0].ДоступенСоюзникам >= Корабли.Количество() - 1 Тогда
		ПриоритетныеЦели.Добавить(ПоказателиПриоритетнойЦели[0].КорабльПротивника);
	КонецЕсли;
	
	Возврат ПриоритетныеЦели;
	
КонецФункции

Функция ПриоритетныеЦелиКорабля(Корабль, СценарииСтрельбы)
	
	ПриоритетныеЦели = Новый Массив;
	
	// Функция возвращает массив кораблей противника, отсортированый в порядке приоритета
	
	Отбор = Новый Структура;
	Отбор.Вставить("КорабльИдентификатор", Корабль["Id"]);
	
	СценарииСтрельбыКорабля = СценарииСтрельбы.Скопировать(Отбор);	
	СценарииСтрельбыКорабля.Сортировать("ВыстрелРасстояние");
	
	// Приоритет выстрелу в упор
	
	Если СценарииСтрельбыКорабля.Количество() <> 0 Тогда
		Если СценарииСтрельбыКорабля[0].ВыстрелРасстояние <= 1 Тогда
			ПриоритетныеЦели.Добавить(СценарииСтрельбыКорабля[0].КорабльПротивника);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПриоритетныеЦели;
	
КонецФункции

Функция РасчитатьСценарииИсцеления()
	
	СценарииИсцеления = Новый ТаблицаЗначений;
	СценарииИсцеления.Колонки.Добавить("Корабль");
	СценарииИсцеления.Колонки.Добавить("КорабльИдентификатор");
	СценарииИсцеления.Колонки.Добавить("КорабльСоюзника");
	СценарииИсцеления.Колонки.Добавить("КорабльСоюзникаИдентификатор");
	СценарииИсцеления.Колонки.Добавить("КорабльСоюзникаЗдоровье");
	СценарииИсцеления.Колонки.Добавить("КорабльСоюзникаПозиция");
	СценарииИсцеления.Колонки.Добавить("Выстрел");
	СценарииИсцеления.Колонки.Добавить("ВыстрелТочка");
	СценарииИсцеления.Колонки.Добавить("ВыстрелЯчейкаКорабля");
	СценарииИсцеления.Колонки.Добавить("ВыстрелРасстояние");
	СценарииИсцеления.Колонки.Добавить("Исцеление");
	СценарииИсцеления.Колонки.Добавить("ИсцелениеПолезное");
	
	КоординатыКораблейСоюзников	  = КоординатыКораблейСоюзников();
	КоординатыКораблейПротивников = КоординатыКораблейПротивников();
	
	Для Каждого Корабль Из Корабли Цикл
		
		АптечкаКорабля = ОсновнаяАптечкаКорабля(Корабль);
		Если АптечкаКорабля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Контроль энергии на начало хода
		// без учета восполнения
		// TODO
		
		Если Корабль["Energy"] < 27 Тогда
			Продолжить;	
		КонецЕсли;
		
		Для Каждого КорабльСоюзник Из Корабли Цикл	
			
			Если Корабль["Id"] = КорабльСоюзник["Id"] Тогда
				Продолжить;
			КонецЕсли;
			
			// Расчет сценария стрельбы для корабля
			
			СценарийИсцеленияКорабля = РасчитатьСценарийИсцеления(Корабль, 
			КорабльСоюзник, 
			КоординатыКораблейСоюзников, 
			КоординатыКораблейПротивников);
			
			Если СценарийИсцеленияКорабля = Неопределено Тогда
				продолжить;
			КонецЕсли;
			
			// Наполнение общего сценария
			
			Для Каждого Элемент Из СценарийИсцеленияКорабля Цикл
				ЗаполнитьЗначенияСвойств(СценарииИсцеления.Добавить(), Элемент);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СценарииИсцеления;	
	
КонецФункции

Функция РасчитатьСценарииСтрельбы()
	
	// Функция возвращает аналитику возможных выстрелов каждого корабля в каждого доступного противника
	
	СценарииСтрельбы = Новый ТаблицаЗначений;
	СценарииСтрельбы.Колонки.Добавить("Корабль");
	СценарииСтрельбы.Колонки.Добавить("КорабльИдентификатор");
	СценарииСтрельбы.Колонки.Добавить("КорабльПротивника");
	СценарииСтрельбы.Колонки.Добавить("КорабльПротивникаИдентификатор");
	СценарииСтрельбы.Колонки.Добавить("КорабльПротивникаЗдоровье");
	СценарииСтрельбы.Колонки.Добавить("КорабльПротивникаПозиция");
	СценарииСтрельбы.Колонки.Добавить("КорабльПротивникаСкорость");
	СценарииСтрельбы.Колонки.Добавить("КорабльПротивникаСкоростьЗначение");
	СценарииСтрельбы.Колонки.Добавить("Выстрел");
	СценарииСтрельбы.Колонки.Добавить("ВыстрелТочка");
	СценарииСтрельбы.Колонки.Добавить("ВыстрелЯчейкаКорабля");
	СценарииСтрельбы.Колонки.Добавить("ВыстрелРасстояние");
	СценарииСтрельбы.Колонки.Добавить("ПопаданияВПротивника");
	СценарииСтрельбы.Колонки.Добавить("ПопаданияВПротивников");
	
	КоординатыКораблей			  = КоординатыКораблей();
	КоординатыКораблейПротивников = КоординатыКораблейПротивников();
	
	Для Каждого Корабль Из Корабли Цикл
		
		Для Каждого КорабльПротивника Из КораблиПротивника Цикл	
			
			// Расчет сценария стрельбы для корабля
			
			СценарийСтрельбыКорабля = РасчитатьСценарийСтрельбы(Корабль, 
			КорабльПротивника, 
			КоординатыКораблей, 
			КоординатыКораблейПротивников);
			
			Если СценарийСтрельбыКорабля = Неопределено Тогда
				продолжить;
			КонецЕсли;
			
			// Наполнение общего сценария
			
			Для Каждого Элемент Из СценарийСтрельбыКорабля Цикл
				ЗаполнитьЗначенияСвойств(СценарииСтрельбы.Добавить(), Элемент);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СценарииСтрельбы;
	
КонецФункции

Функция РасчитатьСценарийИсцеления(Корабль, КорабльСоюзник, КоординатыКораблейСоюзников, КоординатыКораблейПротивников)
	
	Аптечка				  = ОсновнаяАптечкаКорабля(Корабль);
	КорабльПозиция		  = ПозицияКорабля(Корабль);
	КорабльСоюзникПозиция = ПозицияКорабля(КорабльСоюзник);
	
	// Расчитать доступность, как минимальное расстояние между ячейками кораблей не превышающее радиус поражения
	
	Расстояние = РасстояниеМеждуКораблямиОбъект(КорабльПозиция, КорабльСоюзникПозиция);
	Если Расстояние.Значение > Аптечка["Radius"] Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Расчитать лучи брезенхема для каждой точки внутри радиуса поражения, для иных точек (сформулированых эвистически)
	// Учитвая факт, что мы стрляем из ближайшей точки корабля к выбранной для поражения точки
	
	СценарийИсцеления = Новый Массив();
	
	// Расчет лучей во все координаты слишком затратен
	
	МКСоюзника = Новый Массив;
	МКСоюзника.Добавить(ВекторСтрокой(Расстояние.ЯчейкаКорабля2));
	МКСоюзника.Добавить(ВекторСтрокой(Расстояние.МаксЯчейкаКорабля2));
	МКСоюзника.Добавить(ВекторСтрокой(Расстояние.МаксБЯчейкаКорабля2));	
	
	Для Каждого ЯчейкаКорабляСоюзника Из МКСоюзника Цикл
		
		ВыстрелЛуч = РасчитатьВыстрелЛуч(Аптечка, КорабльПозиция, ЯчейкаКорабляСоюзника);
		Если ВыстрелЛуч = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Столкновение
		
		Если ВыстрелЛуч.Луч.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИсцеленоПротивников = РасчитатьПересеченияВыстрелаЛучаСМассивомКоординатКораблей(ВыстрелЛуч.Луч, КоординатыКораблейПротивников);
		Если ИсцеленоПротивников > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Расчет исцеления
		
		Исцеление = 0;
		ИсцелениеПолезное = 0;
		
		Для Каждого Элемент Из КоординатыКораблейСоюзников Цикл
			
			КорабльСоюзникТекущий 			= Элемент.Значение.Корабль;
			КорабльСоюзникТекущийКоординаты = Элемент.Значение.Координаты;
			
			Попадания = РасчитатьПересеченияВыстрелаЛучаСМассивомКоординатКораблей(ВыстрелЛуч.Луч, КорабльСоюзникТекущийКоординаты);	
			Если Попадания = 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			МаксимальноеЗдоровьеКорабля = МаксимальноеЗдоровьеКорабля(КорабльСоюзникТекущий);
			ТекущееИсцеление 			= 10;
			ТекущееИсцелениеПолезное 	= ТекущееИсцеление;		
			ЗдоровьеПослеИсцеления 		= КорабльСоюзникТекущий["Health"] + ТекущееИсцеление;
			
			Если ЗдоровьеПослеИсцеления > МаксимальноеЗдоровьеКорабля Тогда
				ТекущееИсцелениеПолезное = ТекущееИсцелениеПолезное - (ЗдоровьеПослеИсцеления - МаксимальноеЗдоровьеКорабля); 
			КонецЕсли;
			
			Исцеление 		  = Исцеление + ТекущееИсцеление;
			ИсцелениеПолезное = ИсцелениеПолезное + ТекущееИсцелениеПолезное;
			
		КонецЦикла;
		
		Если ИсцелениеПолезное = 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		// Запись показателей стрельбы
		
		ЭлементСценарияИсцеления = Новый Структура;
		ЭлементСценарияИсцеления.Вставить("Корабль"			    		, Корабль);
		ЭлементСценарияИсцеления.Вставить("КорабльИдентификатор"		, Корабль["Id"]);
		ЭлементСценарияИсцеления.Вставить("КорабльСоюзника"			    , КорабльСоюзник);
		ЭлементСценарияИсцеления.Вставить("КорабльСоюзникаИдентификатор", КорабльСоюзник["Id"]);
		ЭлементСценарияИсцеления.Вставить("КорабльСоюзникаЗдоровье"	    , КорабльСоюзник["Health"]);
		ЭлементСценарияИсцеления.Вставить("КорабльСоюзникаПозиция"	    , ВекторСтрокой(КорабльСоюзникПозиция));
		ЭлементСценарияИсцеления.Вставить("Выстрел" 			    	, ВыстрелЛуч);
		ЭлементСценарияИсцеления.Вставить("ВыстрелТочка"				, ВыстрелЛуч.Точка);
		ЭлементСценарияИсцеления.Вставить("ВыстрелЯчейкаКорабля" 		, ВыстрелЛуч.ЯчейкаКорабля);
		ЭлементСценарияИсцеления.Вставить("ВыстрелРасстояние"			, ВыстрелЛуч.Расстояние);
		ЭлементСценарияИсцеления.Вставить("Исцеление"					, Исцеление);
		ЭлементСценарияИсцеления.Вставить("ИсцелениеПолезное"			, ИсцелениеПолезное);
		
		СценарийИсцеления.Добавить(ЭлементСценарияИсцеления);
		
		// Если мы до конца расчитали сцерий исцеления для одной чейки, закончим на этом расчет
		
		Прервать;
		
	КонецЦикла;
	
	Возврат СценарийИсцеления;
	
КонецФункции

Функция РасчитатьСценарийСтрельбы(Корабль, КорабльПротивника, КоординатыКораблей, КоординатыКораблейПротивников)
	
	Орудие 					 = ОсновноеОрудиеКорабля(Корабль);
	КорабльПозиция 			 = ПозицияКорабля(Корабль);
	КорабльПротивникаПозиция = ПозицияКорабля(КорабльПротивника);
	
	// Расчитать доступность, как минимальное расстояние между ячейками кораблей не превышающее радиус поражения
	
	Расстояние = РасстояниеМеждуКораблямиОбъект(КорабльПозиция, КорабльПротивникаПозиция);
	Если Расстояние.Значение > Орудие["Radius"] Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Расчитать лучи брезенхема для каждой точки внутри радиуса поражения, для иных точек (сформулированых эвистически)
	// Учитвая факт, что мы стрляем из ближайшей точки корабля к выбранной для поражения точки
	
	СценарийСтрельбы = Новый Массив();
	
	// Расчет лучей во все координаты противника слишком затратно
	// сделаем выбор для 3х точек  
	// МКПротивника = МассивКоординатКорабля(КорабльПротивникаПозиция, Истина);
	
	МКПротивника = Новый Массив;
	МКПротивника.Добавить(ВекторСтрокой(Расстояние.ЯчейкаКорабля2));
	МКПротивника.Добавить(ВекторСтрокой(Расстояние.МаксЯчейкаКорабля2));
	МКПротивника.Добавить(ВекторСтрокой(Расстояние.МаксБЯчейкаКорабля2));
	
	Для Каждого ЯчейкаКорабляПротивника Из МКПротивника Цикл
		
		ВыстрелЛуч = РасчитатьВыстрелЛуч(Орудие, КорабльПозиция, ЯчейкаКорабляПротивника);
		Если ВыстрелЛуч = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Луч равный нулю можно получить если ожидается, что корабли окажутся в одной точке, 
		// ожидается столкновение
		// TODO Нужно как-то обрабатывать такой кейс, устанавливая новое предполагаемое положение противника
		// в процедуре Положение корабля или тут
		
		Если ВыстрелЛуч.Луч.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Расчитать доступность точки, как луч пересекает противника (любого, цель) и не пересекает союзника
		// Иначе продолжить
		
		ПопаданияВСоюзников = РасчитатьПересеченияВыстрелаЛучаСМассивомКоординатКораблей(ВыстрелЛуч.Луч, КоординатыКораблей);
		Если ПопаданияВСоюзников > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПопаданияВПротивников = РасчитатьПересеченияВыстрелаЛучаСМассивомКоординатКораблей(ВыстрелЛуч.Луч, КоординатыКораблейПротивников);
		ПопаданияВПротивника  = РасчитатьПересеченияВыстрелаЛучаСМассивомКоординатКораблей(ВыстрелЛуч.Луч, МКПротивника);
		
		// Если луч не попадает в цель, то что-то пошло не так
		
		Если ПопаданияВПротивника = 0 Тогда
			ВызватьИсключение "shit shot";
		КонецЕсли;
		
		// Запись показателей стрельбы
		
		ЭлементСценарияСтрельбы = Новый Структура;
		ЭлементСценарияСтрельбы.Вставить("Корабль"			   , Корабль);
		ЭлементСценарияСтрельбы.Вставить("КорабльИдентификатор", Корабль["Id"]);
		
		ЭлементСценарияСтрельбы.Вставить("КорабльПротивника"			    , КорабльПротивника);
		ЭлементСценарияСтрельбы.Вставить("КорабльПротивникаИдентификатор"   , КорабльПротивника["Id"]);
		ЭлементСценарияСтрельбы.Вставить("КорабльПротивникаЗдоровье"	    , КорабльПротивника["Health"]);
		ЭлементСценарияСтрельбы.Вставить("КорабльПротивникаПозиция"	    	, ВекторСтрокой(КорабльПротивникаПозиция));
		ЭлементСценарияСтрельбы.Вставить("КорабльПротивникаСкорость"	    , СкоростьКорабля(КорабльПротивника));		
		ЭлементСценарияСтрельбы.Вставить("КорабльПротивникаСкоростьЗначение");
		
		ЭлементСценарияСтрельбы.Вставить("Выстрел" 			    , ВыстрелЛуч);
		ЭлементСценарияСтрельбы.Вставить("ВыстрелТочка"			, ВыстрелЛуч.Точка);
		ЭлементСценарияСтрельбы.Вставить("ВыстрелЯчейкаКорабля" , ВыстрелЛуч.ЯчейкаКорабля);
		ЭлементСценарияСтрельбы.Вставить("ВыстрелРасстояние"	, ВыстрелЛуч.Расстояние);
		ЭлементСценарияСтрельбы.Вставить("ПопаданияВПротивника"	, ПопаданияВПротивника);
		ЭлементСценарияСтрельбы.Вставить("ПопаданияВПротивников", ПопаданияВПротивников);
		
		ЭлементСценарияСтрельбы.КорабльПротивникаСкоростьЗначение = 
		МодульЧисла(ЭлементСценарияСтрельбы.КорабльПротивникаСкорость.X)
		+ МодульЧисла(ЭлементСценарияСтрельбы.КорабльПротивникаСкорость.Y)
		+ МодульЧисла(ЭлементСценарияСтрельбы.КорабльПротивникаСкорость.Z);	
		
		СценарийСтрельбы.Добавить(ЭлементСценарияСтрельбы);
		
		Прервать;
		
	КонецЦикла;
	
	Возврат СценарийСтрельбы;
	
КонецФункции

Функция РасчитатьВыстрелЛуч(Орудие, КорабльПозиция, Точка)
	
	ВыстрелЛуч = Новый Структура;
	ВыстрелЛуч.Вставить("Луч");
	ВыстрелЛуч.Вставить("Расстояние");
	ВыстрелЛуч.Вставить("ЯчейкаКорабля");
	ВыстрелЛуч.Вставить("Точка");
	
	// Расстояние между ближайшей точкой нашего корабля и заданой точкой (модулем корабля противника)
	
	Расстояние = РасстояниеМеждуКорабльИПозиция(КорабльПозиция, Точка, Ложь);
	Если Расстояние.Значение > Орудие["Radius"] Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	// Луч брезенхема из ближайшей точки корабля в указаную
	
	Луч = ТочкиЛучаПоБрезенхему(Расстояние.ЯчейкаКорабля, Точка, Истина, Орудие["Radius"]);
	Если Луч.Количество() = 0 Тогда
		ВызватьИсключение "Опаньки";
	КонецЕсли;
	
	// Удалим точку нашего коробля	
	
	ИндексЯчейкиКорабля = Луч.Найти(ВекторСтрокой(Расстояние.ЯчейкаКорабля));
	
	Если ИндексЯчейкиКорабля = Неопределено Тогда
		ВызватьИсключение "Что-то пошло не так";	
	КонецЕсли;
	
	Луч.Удалить(ИндексЯчейкиКорабля);
	
	// Удалим точки луча, что не нанесут урон
	
	Пока Луч.Количество() > Орудие["Radius"] Цикл
		Луч.Удалить(Луч.Количество() - 1);
	КонецЦикла;
	
	ВыстрелЛуч = Новый Структура;
	ВыстрелЛуч.Вставить("Луч"			, Луч);
	ВыстрелЛуч.Вставить("Точка"			, Точка);
	ВыстрелЛуч.Вставить("Расстояние"	, Расстояние.Значение);
	ВыстрелЛуч.Вставить("ЯчейкаКорабля"	, Расстояние.ЯчейкаКорабля);
	
	Возврат ВыстрелЛуч;
	
КонецФункции

Функция РасчитатьПересеченияВыстрелаЛучаСМассивомКоординатКораблей(ВыстрелЛуч, МассивКоординатКораблей)
	
	КоличествоПересечений = 0;
	
	Для Каждого МодульКорабля Из МассивКоординатКораблей Цикл
		Если ВыстрелЛуч.Найти(МодульКорабля) <> Неопределено Тогда
			КоличествоПересечений = КоличествоПересечений + 1;	
		КонецЕсли
	КонецЦикла;
	
	Возврат КоличествоПересечений;
	
КонецФункции

/////////////////////////////////////////////////////
// Функции связаные с кораблем

Функция КорабльПротивникаЛекс()
	
	Для Каждого ИдентификаторКорабля Из КораблиПротивникаЛекс Цикл
		
		Для Каждого Корабль Из КораблиПротивника Цикл
			
			Если Корабль["Id"] = ИдентификаторКорабля Тогда
				Возврат Корабль;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция МодульКорабля(Знач ИмяМодуля)
	
	ИмяМодуля = СокрЛП(ИмяМодуля);
	
	Если ЭтоДрафт <> Истина Тогда
		ВызватьИсключение "Функция доступна только на драфте";
	КонецЕсли;
	
	Для Каждого Модуль Из Состояние["Equipment"] Цикл
		
		Если ВРег(ИмяМодуля) = ВРег(Модуль["Equipment"]["Name"]) Тогда
			Возврат Модуль;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция РазмерКартыДляКорабля(Корабль)
	Возврат Число(РазмерКарты - 2) ; // Заменить 2 на Корабль["Size???"] 
КонецФункции

Функция ОсновноеОрудиеКорабля(Корабль)
	
	Оборудование = Корабль["Equipment"];
	
	Для Каждого Элемент Из Оборудование Цикл
		
		Если Элемент["Type"] = 1 Тогда
			Возврат Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;	
	
КонецФункции

Функция ОрудияКорабля(Корабль)
	
	ОрудияКорабля = Новый Массив();
	
	Оборудование = Корабль["Equipment"];
	
	Для Каждого Элемент Из Оборудование Цикл		
		Если Элемент["Type"] = 1 Тогда
			ОрудияКорабля.Добавить(Элемент);	
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ОрудияКорабля;
	
КонецФункции

Функция ОсновнаяАптечкаКорабля(Корабль)
	
	Оборудование = Корабль["Equipment"];
	
	Для Каждого Элемент Из Оборудование Цикл
		
		Если Элемент["Type"] = 7 Тогда
			Возврат Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;	
	
КонецФункции

Функция МаксимальноеЗдоровьеКорабля(Корабль)
	
	// TODO сделать правильно
	
	МаксимальноеЗдоровьеКорабля = 0;
	
	Оборудование = Корабль["Equipment"];
	
	Для Каждого Элемент Из Оборудование Цикл		
		Если Элемент["Type"] = 3 Тогда
			МаксимальноеЗдоровьеКорабля = МаксимальноеЗдоровьеКорабля + 100;	
		КонецЕсли;		
	КонецЦикла;
	
	Возврат МаксимальноеЗдоровьеКорабля;
	
КонецФункции

Функция АптечкиКорабля(Корабль)
	
	ОрудияКорабля = Новый Массив();
	
	Оборудование = Корабль["Equipment"];
	
	Для Каждого Элемент Из Оборудование Цикл		
		Если Элемент["Type"] = 7 Тогда
			ОрудияКорабля.Добавить(Элемент);	
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ОрудияКорабля;
	
КонецФункции

Функция ДвигательКорабля(Корабль)
	
	Оборудование = Корабль["Equipment"];
	
	Для Каждого Элемент Из Оборудование Цикл
		
		Если Элемент["Name"] = "big_engine" ИЛИ Элемент["Name"] = "giant_engine" Тогда
			Возврат Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НачальнаяПозицияКорабля(Корабль)
	
	ПоцияКОтступлению = НовыйВектор(0, 0, 0);
	
	УголИгрока1 = Истина;
	
	Попытка
		ПорядковыйНомер = Число(Корабль["Id"]);
		Если ПорядковыйНомер >= 10000 Тогда
			ПорядковыйНомер = ПорядковыйНомер - 10000;
			УголИгрока1 = Ложь;
		КонецЕсли;
	Исключение
		ПорядковыйНомер = 0;
	КонецПопытки;
	
	Если УголИгрока1 Тогда
		ПоцияКОтступлению = НовыйВектор(ПорядковыйНомер * 2, 0, 0);	
	Иначе
		ПоцияКОтступлению = НовыйВектор(20 + (ПорядковыйНомер * 2), 28, 28);	
	КонецЕсли;
	
	Возврат ПоцияКОтступлению;
	
КонецФункции

Функция ПолучитьВекторСкоростиКорабля(Корабль)
	Возврат НовыйВектор(Корабль["Velocity"]);
КонецФункции

Функция СкоростьКорабля(Корабль, Педполагаемая = Истина)
	
	Если Корабль = Неопределено
		ИЛИ Корабль["Id"] = Неопределено 
		ИЛИ Корабль["Velocity"] = Неопределено Тогда
		ВызватьИсключение "Непредполагаемое значение параметра №1";
	КонецЕсли;
	
	СкоростьКорабля = НовыйВектор(Корабль["Velocity"]);
	
	Если Педполагаемая = Истина Тогда
		
		// Для своих кораблей
		
		Для Каждого Команда Из Ответ["UserCommands"] Цикл
			
			Если Команда["Command"] = "ACCELERATE"
				И Команда["Parameters"]["Id"] = Корабль["Id"] Тогда
				ВекторУскорения = НовыйВектор(Команда["Parameters"]["Vector"]);
				СкоростьКорабля = СуммаВекторов(СкоростьКорабля, ВекторУскорения);
				Прервать;
			КонецЕсли
			
		КонецЦикла;
		
		// TODO Для чужих, можно учитвать ограничения тормозного пути
		
	КонецЕсли;
	
	Возврат СкоростьКорабля;
	
КонецФункции

Функция ПозицияКорабля(Корабль, Педполагаемая = Истина)
	
	Если Корабль = Неопределено
		ИЛИ Корабль["Id"] = Неопределено 
		ИЛИ Корабль["Velocity"] = Неопределено Тогда
		ВызватьИсключение "Непредполагаемое значение параметра №1";
	КонецЕсли;
	
	ПозицияКорабля = НовыйВектор(Корабль["Position"]);
	
	Если Педполагаемая = Истина Тогда
		
		СкоростьКорабля = СкоростьКорабля(Корабль, Педполагаемая);
		ПозицияКорабля  = СуммаВекторов(ПозицияКорабля, СкоростьКорабля);
		
	КонецЕсли;
	
	Возврат ПозицияКорабля;
	
КонецФункции

Функция ПозицияКорабляМассивКоординат(Корабль, Педполагаемая = Истина)
	
	// Функция возвращает массив всех координат корабля
	
	ПозицияКорабля = ПозицияКорабля(Корабль, Педполагаемая);
	
	Возврат МассивКоординатКорабля(ПозицияКорабля);
	
КонецФункции

Функция МассивКоординатКорабля(Знач ПозицияКорабля, ЭлементыСтроки = Ложь)
	
	//	Функция получает все координаты корабля, по его позиции согласно вводу
	
	Если ТипЗнч(ПозицияКорабля) = Тип("Строка") Тогда
		ПозицияКорабля = НовыйВектор(ПозицияКорабля);
	КонецЕсли;
	
	МассивКоординат = Новый Массив;
	МассивКоординат.Добавить(ПозицияКорабля);
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y   , ПозицияКорабля.Z	));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X 	 , ПозицияКорабля.Y +1, ПозицияКорабля.Z	));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y +1, ПозицияКорабля.Z	));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X    , ПозицияКорабля.Y   , ПозицияКорабля.Z + 1));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y   , ПозицияКорабля.Z + 1));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X 	 , ПозицияКорабля.Y +1, ПозицияКорабля.Z + 1));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y +1, ПозицияКорабля.Z + 1));
	
	Если ЭлементыСтроки Тогда
		
		Для Сч = 0 По МассивКоординат.Количество() - 1 Цикл
			МассивКоординат[СЧ] = ВекторСтрокой(МассивКоординат[Сч]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивКоординат;
	
КонецФункции

Функция КоллекцияПредполагаемыхКоординатПротивникаПослеУскорения(ПозицияКорабля, ЭлементыСтроки = Ложь)
	
	МассивКоординатКорабля = МассивКоординатКорабля(ПозицияКорабля, ЭлементыСтроки);
	
	// Векторы 1 балл
	
	МассивКоординатКорабляБалл1 = Новый Массив;
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y - 1, ПозицияКорабля.Z));
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y - 1, ПозицияКорабля.Z));
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y + 2, ПозицияКорабля.Z));	
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y + 2, ПозицияКорабля.Z));			
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y - 1, ПозицияКорабля.Z + 1));
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y - 1, ПозицияКорабля.Z + 1));
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y + 2, ПозицияКорабля.Z + 1));	
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y + 2, ПозицияКорабля.Z + 1));
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y - 1, ПозицияКорабля.Z + 2));
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y - 1, ПозицияКорабля.Z + 2));
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y + 2, ПозицияКорабля.Z + 2));	
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y + 2, ПозицияКорабля.Z + 2));	
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y - 1, ПозицияКорабля.Z - 1));
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y - 1, ПозицияКорабля.Z - 1));
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y + 2, ПозицияКорабля.Z - 1));	
	МассивКоординатКорабляБалл1.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y + 2, ПозицияКорабля.Z - 1));	
	
	// Векторы 2 балла
	
	МассивКоординатКорабляБалл2 = Новый Массив;
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X    , ПозицияКорабля.Y - 1, ПозицияКорабля.Z));			
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y - 1, ПозицияКорабля.Z));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y	   , ПозицияКорабля.Z));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y + 1, ПозицияКорабля.Z));	
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y + 2, ПозицияКорабля.Z));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X	 , ПозицияКорабля.Y + 2, ПозицияКорабля.Z));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y    , ПозицияКорабля.Z));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y + 1, ПозицияКорабля.Z));	
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X    , ПозицияКорабля.Y - 1, ПозицияКорабля.Z + 1));			
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y - 1, ПозицияКорабля.Z + 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y	   , ПозицияКорабля.Z + 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y + 1, ПозицияКорабля.Z + 1));	
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y + 2, ПозицияКорабля.Z + 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X	 , ПозицияКорабля.Y + 2, ПозицияКорабля.Z + 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y    , ПозицияКорабля.Z + 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y + 1, ПозицияКорабля.Z + 1));	
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X    , ПозицияКорабля.Y - 1, ПозицияКорабля.Z + 2));			
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y - 1, ПозицияКорабля.Z + 2));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y	   , ПозицияКорабля.Z + 2));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y + 1, ПозицияКорабля.Z + 2));	
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y + 2, ПозицияКорабля.Z + 2));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X	 , ПозицияКорабля.Y + 2, ПозицияКорабля.Z + 2));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y    , ПозицияКорабля.Z + 2));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y + 1, ПозицияКорабля.Z + 2));		
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X    , ПозицияКорабля.Y - 1, ПозицияКорабля.Z - 1));			
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y - 1, ПозицияКорабля.Z - 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y	   , ПозицияКорабля.Z - 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 2, ПозицияКорабля.Y + 1, ПозицияКорабля.Z - 1));	
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y + 2, ПозицияКорабля.Z - 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X	 , ПозицияКорабля.Y + 2, ПозицияКорабля.Z - 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y    , ПозицияКорабля.Z - 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X - 1, ПозицияКорабля.Y + 1, ПозицияКорабля.Z - 1));	
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X    , ПозицияКорабля.Y    , ПозицияКорабля.Z - 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y    , ПозицияКорабля.Z - 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X 	 , ПозицияКорабля.Y + 1, ПозицияКорабля.Z - 1));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y + 1, ПозицияКорабля.Z - 1));	
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X    , ПозицияКорабля.Y    , ПозицияКорабля.Z + 2));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y    , ПозицияКорабля.Z + 2));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X 	 , ПозицияКорабля.Y + 1, ПозицияКорабля.Z + 2));
	МассивКоординатКорабляБалл2.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y + 1, ПозицияКорабля.Z + 2));
	
	Если ЭлементыСтроки Тогда
		
		Для Сч = 0 По МассивКоординатКорабляБалл1.Количество() -1 Цикл
			МассивКоординатКорабляБалл1[Сч] = ВекторСтрокой(МассивКоординатКорабляБалл1[Сч]); 	
		КонецЦикла;
		
		Для Сч = 0 По МассивКоординатКорабляБалл2.Количество() -1 Цикл
			МассивКоординатКорабляБалл2[Сч] = ВекторСтрокой(МассивКоординатКорабляБалл2[Сч]); 	
		КонецЦикла;
		
		
	КонецЕсли;
	
	
	КоллекцияПредполагаемыхКоординат = Новый Соответствие;			
	КоллекцияПредполагаемыхКоординат.Вставить(4, МассивКоординатКорабля);	
	КоллекцияПредполагаемыхКоординат.Вставить(2, МассивКоординатКорабляБалл2);	
	КоллекцияПредполагаемыхКоординат.Вставить(1, МассивКоординатКорабляБалл1);
	
	Возврат КоллекцияПредполагаемыхКоординат;
	
КонецФункции

Функция РасстояниеМеждуКораблямиОбъект(Знач ПозицияКорабля1, Знач ПозицияКорабля2)
	
	//	Функция расчитывает расстояние между кораблями, как сложными объектами
	//  возвращает:
	//	1. минимальное значение расстояния и координаты ближайших точек,
	//  2. максимальное значение расстояния и координаты дальних точек
	//  Вычисленные точки могут использоваться в сценариях стрельбы и целеуказания
	
	Если ТипЗнч(ПозицияКорабля1) = Тип("Строка") Тогда
		ПозицияКорабля1 = НовыйВектор(ПозицияКорабля1);
	КонецЕсли;
	
	Если ТипЗнч(ПозицияКорабля2) = Тип("Строка") Тогда
		ПозицияКорабля2 = НовыйВектор(ПозицияКорабля2);
	КонецЕсли;
	
	// Массивы координат объектов
	
	МассивКоординатКорабля1 = МассивКоординатКорабля(ПозицияКорабля1);
	МассивКоординатКорабля2 = МассивКоординатКорабля(ПозицияКорабля2);
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Расстояние");	
	ТаблицаРезультатов.Колонки.Добавить("ЯчейкаКорабля1");
	ТаблицаРезультатов.Колонки.Добавить("ЯчейкаКорабля2");
	
	// Расчитаем расстояние ячеек кораблей друг от дурга
	
	Для Каждого ЯчейкаКорабля1 Из МассивКоординатКорабля1 Цикл
		
		Для Каждого ЯчейкаКорабля2 Из МассивКоординатКорабля2 Цикл
			
			НоваяСтрока = ТаблицаРезультатов.Добавить(); 
			НоваяСтрока.ЯчейкаКорабля1 = ЯчейкаКорабля1;
			НоваяСтрока.ЯчейкаКорабля2 = ЯчейкаКорабля2;
			НоваяСтрока.Расстояние	   = РасстояниеЧебышев(ЯчейкаКорабля1, ЯчейкаКорабля2);
			
		КонецЦикла;		
		
	КонецЦикла;
	
	// Формирование объекта результата
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		ВызватьИсключение "Опаньки";
	КонецЕсли;
	
	РасстояниеМеждуКораблями = Новый Структура;
	
	// Минимальное расстояние
	
	ТаблицаРезультатов.Сортировать("Расстояние");
	
	РасстояниеМеждуКораблями.Вставить("Значение"	  , ТаблицаРезультатов[0].Расстояние);
	РасстояниеМеждуКораблями.Вставить("ЯчейкаКорабля1", ТаблицаРезультатов[0].ЯчейкаКорабля1);
	РасстояниеМеждуКораблями.Вставить("ЯчейкаКорабля2", ТаблицаРезультатов[0].ЯчейкаКорабля2);
	
	// Максимальное расстояние
	
	ТаблицаРезультатов.Сортировать("Расстояние УБЫВ");
	
	РасстояниеМеждуКораблями.Вставить("МаксЗначение"      , ТаблицаРезультатов[0].Расстояние);
	РасстояниеМеждуКораблями.Вставить("МаксЯчейкаКорабля1", ТаблицаРезультатов[0].ЯчейкаКорабля1);
	РасстояниеМеждуКораблями.Вставить("МаксЯчейкаКорабля2", ТаблицаРезультатов[0].ЯчейкаКорабля2);
	
	// Максимальное от ближайшей ячейки
	
	РасстояниеМеждуКораблями.Вставить("МаксБЗначение"      , РасстояниеМеждуКораблями.Значение);
	РасстояниеМеждуКораблями.Вставить("МаксБЯчейкаКорабля1", РасстояниеМеждуКораблями.ЯчейкаКорабля1);
	РасстояниеМеждуКораблями.Вставить("МаксБЯчейкаКорабля2", РасстояниеМеждуКораблями.ЯчейкаКорабля2);
	
	Для Каждого ЯчейкаКорабля2 Из МассивКоординатКорабля2 Цикл
		Расстояние = РасстояниеЧебышев(РасстояниеМеждуКораблями.ЯчейкаКорабля1, ЯчейкаКорабля2);
		Если Расстояние > РасстояниеМеждуКораблями.МаксБЗначение Тогда
			РасстояниеМеждуКораблями.МаксБЗначение        = Расстояние;
			РасстояниеМеждуКораблями.МаксБЯчейкаКорабля2  = НовыйВектор(ЯчейкаКорабля2);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РасстояниеМеждуКораблями;
	
КонецФункции

Функция РасстояниеМеждуКорабльИПозиция(Знач ПозицияКорабля, Знач Позиция, Чебышев = Истина)
	
	//	Функция расчитывает расстояние между кораблем и точкой в системе координта
	
	Если ТипЗнч(ПозицияКорабля) = Тип("Строка") Тогда
		ПозицияКорабля = НовыйВектор(ПозицияКорабля);
	КонецЕсли;
	
	Если ТипЗнч(Позиция) = Тип("Строка") Тогда
		Позиция = НовыйВектор(Позиция);
	КонецЕсли;
	
	// Массивы координат объектов
	
	МассивКоординатКорабля = МассивКоординатКорабля(ПозицияКорабля);
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Расстояние");
	ТаблицаРезультатов.Колонки.Добавить("РасстояниеДляСортировки");	
	ТаблицаРезультатов.Колонки.Добавить("ЯчейкаКорабля");
	
	// Расчитаем расстояние ячеек кораблей друг от дурга
	
	Для Каждого ЯчейкаКорабля Из МассивКоординатКорабля Цикл
		
		НоваяСтрока = ТаблицаРезультатов.Добавить(); 
		НоваяСтрока.ЯчейкаКорабля = ЯчейкаКорабля;
		НоваяСтрока.Расстояние    = РасстояниеЧебышев(ЯчейкаКорабля, Позиция);
		
		Если Чебышев Тогда
			НоваяСтрока.РасстояниеДляСортировки = НоваяСтрока.Расстояние;
		Иначе
			НоваяСтрока.РасстояниеДляСортировки = РасстояниеМанхэттен(ЯчейкаКорабля, Позиция);
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование объекта результата
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		ВызватьИсключение "Опаньки";
	КонецЕсли;
	
	// Минимальное расстояние
	
	ТаблицаРезультатов.Сортировать("РасстояниеДляСортировки");
	
	РасстояниеМеждуКораблями = Новый Структура;
	РасстояниеМеждуКораблями.Вставить("Значение"	 , ТаблицаРезультатов[0].Расстояние);
	РасстояниеМеждуКораблями.Вставить("ЯчейкаКорабля", ТаблицаРезультатов[0].ЯчейкаКорабля);
	
	Возврат РасстояниеМеждуКораблями;
	
КонецФункции

Функция ПолучитьВекторКоординатКорабля(Корабль)
	Возврат НовыйВектор(Корабль["Position"]);
КонецФункции

Функция КорабльНаш(Корабль)
	Возврат (Корабль["Equipment"] <> Неопределено);
КонецФункции

Функция МаксимальноеУскорениеНашегоКорабля(Корабль)
	Двигатель = ДвигательКорабля(Корабль);
	Возврат Число(Двигатель["MaxAccelerate"]);
КонецФункции

Функция МаксимальноеУскорениеВражескогоКорабля(Корабль)
	Возврат 1;
КонецФункции

Функция КритичнаяСкорость(Корабль, Скорость = Неопределено)
	
	КорабльНаш 			    = КорабльНаш(Корабль);
	КоординатыКорабля 	    = ПолучитьВекторКоординатКорабля(Корабль);
	Скорость		    	= ?(Скорость = Неопределено , ПолучитьВекторСкоростиКорабля(Корабль) , НовыйВектор(Скорость));
	МаксимальноеУскорение   = ?(КорабльНаш, МаксимальноеУскорениеНашегоКорабля(Корабль), МаксимальноеУскорениеВражескогоКорабля(Корабль));
	
	X = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.X, Скорость.X, МаксимальноеУскорение);
	Y = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.Y, Скорость.Y, МаксимальноеУскорение);
	Z = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.Z, Скорость.Z, МаксимальноеУскорение);
	
	Если КритичнаяТочкаДляКорабля(Корабль, X) Тогда 
		Возврат Истина;
	КонецЕсли;
	Если КритичнаяТочкаДляКорабля(Корабль, Y) Тогда 
		Возврат Истина;
	КонецЕсли;
	Если КритичнаяТочкаДляКорабля(Корабль, Z) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция КритичноеУскорение(Корабль, ВекторУскорения) 
	
	КорабльНаш 			    = КорабльНаш(Корабль);
	КоординатыКорабля 	    = ПолучитьВекторКоординатКорабля(Корабль);
	ВекторУскорения 		= НовыйВектор(ВекторУскорения);
	СкоростьКорабля		    = ПолучитьВекторСкоростиКорабля(Корабль);
	МаксимальноеУскорение   = ?(КорабльНаш, МаксимальноеУскорениеНашегоКорабля(Корабль), МаксимальноеУскорениеВражескогоКорабля(Корабль));
	
	X = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.X + СкоростьКорабля.X + ВекторУскорения.X, СкоростьКорабля.X + ВекторУскорения.X, МаксимальноеУскорение);
	Y = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.Y + СкоростьКорабля.Y + ВекторУскорения.Y, СкоростьКорабля.Y + ВекторУскорения.Y, МаксимальноеУскорение);
	Z = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.Z + СкоростьКорабля.Z + ВекторУскорения.Z, СкоростьКорабля.Z + ВекторУскорения.Z, МаксимальноеУскорение);
	
	Если КритичнаяТочкаДляКорабля(Корабль, X) Тогда
		Возврат Истина;
	КонецЕсли;
	Если КритичнаяТочкаДляКорабля(Корабль, Y) Тогда
		Возврат Истина;
	КонецЕсли;
	Если КритичнаяТочкаДляКорабля(Корабль, Z) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция МинимальнаяКонечнаяКоординатаТормозногоПути(Знач Координата, Знач Скорость, Знач МаксУскорение)
	
	Если Скорость > 0 Тогда 
		Пока НЕ Скорость <=0 Цикл
			Координата = Координата + (Скорость - МаксУскорение);
			Скорость = Скорость - МаксУскорение;
		КонецЦикла;
	КонецЕсли;
	
	Если Скорость < 0 Тогда 
		Пока НЕ Скорость >= 0 Цикл
			Координата = Координата + (Скорость + МаксУскорение);
			Скорость = Скорость + МаксУскорение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Число(Координата) ;
КонецФункции

Функция ПолучитьВекторУскорения(Корабль, Цель)
	КоординатыЦели			= НовыйВектор(Цель);
	КоординатыКорабля 	    = ПолучитьВекторКоординатКорабля(Корабль);
	
	X = ?(КоординатыКорабля.X < КоординатыЦели.X , 1 , -1); 
	Y = ?(КоординатыКорабля.Y < КоординатыЦели.Y , 1 , -1); 
	Z = ?(КоординатыКорабля.Z < КоординатыЦели.Z , 1 , -1); 
	
	Если КоординатыКорабля.X = КоординатыЦели.X Тогда 
		X = 0;
	КонецЕсли;
	Если КоординатыКорабля.Y = КоординатыЦели.Y Тогда 
		Y = 0;
	КонецЕсли;
	Если КоординатыКорабля.Z = КоординатыЦели.Z Тогда 
		Z = 0;
	КонецЕсли;
	
	Возврат НовыйВектор(X, Y, Z);
	
КонецФункции 

Функция КритичнаяТочкаДляКорабля(Корабль, Знач Точка) 
	
	Возврат ((Точка < 0) ИЛИ (Точка > РазмерКартыДляКорабля(Корабль)));
	
КонецФункции

Функция ПолучитьВекторУскоренияКТочке(Корабль, Координаты)
	КоординатыЦели			= НовыйВектор(Координаты);
	КорабльНаш 			    = КорабльНаш(Корабль);
	КоординатыКорабля 	    = ПолучитьВекторКоординатКорабля(Корабль);
	СкоростьКорабля		    = ПолучитьВекторСкоростиКорабля(Корабль);
	МаксимальноеУскорение   = ?(КорабльНаш, МаксимальноеУскорениеНашегоКорабля(Корабль), МаксимальноеУскорениеВражескогоКорабля(Корабль));
	РазмерКартыДляКорабля 	= РазмерКартыДляКорабля(Корабль);
	
	X_Цели = ?(КоординатыЦели.X > РазмерКартыДляКорабля , РазмерКартыДляКорабля , КоординатыЦели.X);
	X_Цели = ?(X_Цели < 0  , 0 , X_Цели);
	Y_Цели = ?(КоординатыЦели.Y > РазмерКартыДляКорабля , РазмерКартыДляКорабля , КоординатыЦели.Y);
	Y_Цели = ?(Y_Цели < 0  , 0  , Y_Цели);
	Z_Цели = ?(КоординатыЦели.Z > РазмерКартыДляКорабля , РазмерКартыДляКорабля , КоординатыЦели.Z);
	Z_Цели = ?(Z_Цели < 0  , 0  , Z_Цели);
	
	X = Неопределено;
	Y = Неопределено;
	Z = Неопределено;
	
	ВекторУскорения = ПолучитьВекторУскорения(Корабль, КоординатыЦели);
	
	i = - МаксимальноеУскорение ;
	
	Пока i <= МаксимальноеУскорение Цикл
		
		Координата_X = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.X + СкоростьКорабля.X + ВекторУскорения.X * i, СкоростьКорабля.X + ВекторУскорения.X * i, МаксимальноеУскорение);
		Координата_Y = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.Y + СкоростьКорабля.Y + ВекторУскорения.Y * i, СкоростьКорабля.Y + ВекторУскорения.Y * i, МаксимальноеУскорение);
		Координата_Z = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.Z + СкоростьКорабля.Z + ВекторУскорения.Z * i, СкоростьКорабля.Z + ВекторУскорения.Z * i, МаксимальноеУскорение);
		
		Если (КоординатыКорабля.X > X_Цели И Координата_X > X_Цели)
			ИЛИ (КоординатыКорабля.X < X_Цели И Координата_X < X_Цели) Тогда
			
			X = ВекторУскорения.X * i;
		КонецЕсли;
		Если (КоординатыКорабля.Y > Y_Цели И Координата_Y > Y_Цели)
			ИЛИ (КоординатыКорабля.Y < Y_Цели И Координата_Y < Y_Цели) Тогда
			
			Y = ВекторУскорения.Y * i;
		КонецЕсли;
		Если (КоординатыКорабля.Z > Z_Цели И Координата_Z > Z_Цели)
			ИЛИ (КоординатыКорабля.Z < Z_Цели И Координата_Z < Z_Цели) Тогда
			Z = ВекторУскорения.Z * i;
		КонецЕсли;
		
		Если Координата_X = X_Цели  Тогда
			X = ВекторУскорения.X * i;
		КонецЕсли;
		Если  Координата_Y = Y_Цели Тогда
			Y = ВекторУскорения.Y * i;
		КонецЕсли;
		Если  Координата_Z = Z_Цели Тогда
			Z = ВекторУскорения.Z * i;
		КонецЕсли;
		
		i = i + 1;
	КонецЦикла;
	
	ВекторМаксимальногоТорможения = ПолучитьВекторМаксимальногоТорможения(Корабль);
	
	X = ?(X = Неопределено , ВекторМаксимальногоТорможения.X, X);
	Y = ?(Y = Неопределено , ВекторМаксимальногоТорможения.Y, Y);
	Z = ?(Z = Неопределено , ВекторМаксимальногоТорможения.Z, Z);
	
	Возврат НовыйВектор(X,Y,Z);
	
КонецФункции

Функция ПолучитьМаксимальныйВекторУскорения(Корабль, Координаты)
	
	КоординатыЦели			= НовыйВектор(Координаты);
	КорабльНаш 			    = КорабльНаш(Корабль);
	КоординатыКорабля 	    = ПолучитьВекторКоординатКорабля(Корабль);
	Скорость		    	= ПолучитьВекторСкоростиКорабля(Корабль);
	МаксимальноеУскорениеКорабля   = ?(КорабльНаш = Истина, МаксимальноеУскорениеНашегоКорабля(Корабль), МаксимальноеУскорениеВражескогоКорабля(Корабль));
	
	X = Неопределено;
	Y = Неопределено;
	Z = Неопределено;
	
	ВекторУскорения = ПолучитьВекторУскорения(Корабль, КоординатыЦели);
	
	i = - МаксимальноеУскорениеКорабля;
	
	Пока i <= МаксимальноеУскорениеКорабля Цикл 
		
		X_Конца = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.X + Скорость.X + ВекторУскорения.X * i, Скорость.X + ВекторУскорения.X * i, МаксимальноеУскорениеКорабля);
		Y_Конца = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.Y + Скорость.Y + ВекторУскорения.Y * i, Скорость.Y + ВекторУскорения.Y * i, МаксимальноеУскорениеКорабля);
		Z_Конца = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.Z + Скорость.Z + ВекторУскорения.Z * i, Скорость.Z + ВекторУскорения.Z * i, МаксимальноеУскорениеКорабля);
		
		Если НЕ КритичнаяТочкаДляКорабля(Корабль, X_Конца) Тогда
			X = ВекторУскорения.X * i;
		КонецЕсли;
		Если НЕ КритичнаяТочкаДляКорабля(Корабль, Y_Конца) Тогда
			Y = ВекторУскорения.Y * i;
		КонецЕсли;
		Если НЕ КритичнаяТочкаДляКорабля(Корабль, Z_Конца) Тогда
			Z = ВекторУскорения.Z * i;
		КонецЕсли;
		
		i = i + 1;
	КонецЦикла;
	
	ВекторМаксимальногоТорможения = ПолучитьВекторМаксимальногоТорможения(Корабль);
	
	X = ?(X = Неопределено , ВекторМаксимальногоТорможения.X, X);
	Y = ?(Y = Неопределено , ВекторМаксимальногоТорможения.Y, Y);
	Z = ?(Z = Неопределено , ВекторМаксимальногоТорможения.Z, Z);
	
	Возврат НовыйВектор(X,Y,Z);
	
КонецФункции

Функция ПолучитьВекторМаксимальногоТорможения(Корабль)
	КорабльНаш 			    = КорабльНаш(Корабль);
	Скорость		    	= ПолучитьВекторСкоростиКорабля(Корабль);
	МаксимальноеУскорениеКорабля   = ?(КорабльНаш = Истина, МаксимальноеУскорениеНашегоКорабля(Корабль), МаксимальноеУскорениеВражескогоКорабля(Корабль));
	
	X = ?(Скорость.X > 0 , -МаксимальноеУскорениеКорабля , МаксимальноеУскорениеКорабля); 
	Y = ?(Скорость.Y > 0 , -МаксимальноеУскорениеКорабля , МаксимальноеУскорениеКорабля); 
	Z = ?(Скорость.Z > 0 , -МаксимальноеУскорениеКорабля , МаксимальноеУскорениеКорабля); 
	
	Возврат НовыйВектор(X, Y, Z);
КонецФункции 

Функция ПолучитьВекторДляОстановкиКорабля(Корабль)
	КорабльНаш 			    = КорабльНаш(Корабль);
	КоординатыКорабля 	    = ПолучитьВекторКоординатКорабля(Корабль);
	Скорость		    	= ПолучитьВекторСкоростиКорабля(Корабль);
	МаксимальноеУскорениеКорабля   = ?(КорабльНаш, МаксимальноеУскорениеНашегоКорабля(Корабль), МаксимальноеУскорениеВражескогоКорабля(Корабль));
	
	X = Неопределено;
	Y = Неопределено;
	Z = Неопределено;
	
	i = - МаксимальноеУскорениеКорабля ;
	
	Пока i <= МаксимальноеУскорениеКорабля Цикл 
		
		Если Скорость.X + i = 0 Тогда 
			X = i;
		КонецЕсли;
		Если Скорость.Y + i = 0 Тогда 
			Y = i;
		КонецЕсли;
		Если Скорость.Z + i = 0 Тогда 
			Z = i;
		КонецЕсли;
		
		i= i + 1 ;
	КонецЦикла;
	
	ВекторМаксимальногоТорможения = ПолучитьВекторМаксимальногоТорможения(Корабль);
	
	X = ?(X = Неопределено , ВекторМаксимальногоТорможения.X, X) ;
	Y = ?(Y = Неопределено , ВекторМаксимальногоТорможения.Y, Y) ;
	Z = ?(Z = Неопределено , ВекторМаксимальногоТорможения.Z, Z) ;	
	
	Возврат НовыйВектор(X, Y, Z);
	
КонецФункции

Функция Дрейф(Корабль)
	КорабльНаш 			    = КорабльНаш(Корабль);
	КоординатыКорабля 	    = ПолучитьВекторКоординатКорабля(Корабль);
	Скорость		    	= ПолучитьВекторСкоростиКорабля(Корабль);
	МаксимальноеУскорение   = ?(КорабльНаш, МаксимальноеУскорениеНашегоКорабля(Корабль), МаксимальноеУскорениеВражескогоКорабля(Корабль));
	
	Xmin = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.X, Скорость.X, МаксимальноеУскорение);
	Ymin = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.Y, Скорость.Y, МаксимальноеУскорение);
	Zmin = МинимальнаяКонечнаяКоординатаТормозногоПути(КоординатыКорабля.Z, Скорость.Z, МаксимальноеУскорение);
	
	X = Неопределено;
	Y = Неопределено;
	Z = Неопределено;
	
	Если КритичнаяТочкаДляКорабля(Корабль, Xmin) Тогда 
		Если Скорость.X > 0 Тогда 
			X = -1;
		Иначе 
			X = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если КритичнаяТочкаДляКорабля(Корабль, Ymin) Тогда 
		Если Скорость.Y > 0 Тогда 
			Y = -1;
		Иначе 
			Y = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если КритичнаяТочкаДляКорабля(Корабль, Zmin) Тогда 
		Если Скорость.Z > 0 Тогда 
			Z = -1;
		Иначе 
			Z = 1;
		КонецЕсли;
	КонецЕсли;
	
	X = ?(X = Неопределено, 0 , X);
	Y = ?(Y = Неопределено, 0 , Y);
	Z = ?(Z = Неопределено, 0 , Z);
	
	
	ДобавитьКоманду(Ускорение(Корабль, НовыйВектор(X,Y,Z)));
	
	
КонецФункции

Функция Летим(Корабль, Координаты, Максимально = Ложь)
	
	КоординатыЦели			= НовыйВектор(Координаты);
	КорабльНаш 			    = КорабльНаш(Корабль);
	КоординатыКорабля 	    = ПолучитьВекторКоординатКорабля(Корабль);
	Скорость		    	= ПолучитьВекторСкоростиКорабля(Корабль);
	МаксимальноеУскорениеКорабля   = ?(КорабльНаш, МаксимальноеУскорениеНашегоКорабля(Корабль), МаксимальноеУскорениеВражескогоКорабля(Корабль));
	
	Если Максимально = Ложь Тогда
		ВекторУскорения = ПолучитьВекторУскоренияКТочке(Корабль, КоординатыЦели);
	Иначе 
		ВекторУскорения = ПолучитьМаксимальныйВекторУскорения(Корабль, КоординатыЦели);
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Корабль" , Корабль);
	СтруктураОтвета.Вставить("КоординатыЦели" , КоординатыЦели);
	СтруктураОтвета.Вставить("ВекторУскорения" , ВекторУскорения);
	
	
	Отладка.Добавить(Строка(Корабль["Id"]) + ";" + "K:" + ВекторСтрокой(ПолучитьВекторКоординатКорабля(Корабль)) + ";V:" + ВекторСтрокой(ПолучитьВекторСкоростиКорабля(Корабль)) + ";W:" + ВекторСтрокой(ВекторУскорения) + ";C:" + ВекторСтрокой(КоординатыЦели));
	
	Возврат СтруктураОтвета;
	
	// ДобавитьКоманду(Ускорение(Корабль, ВекторУскорения));
	
КонецФункции

Функция КоординатыКораблей()
	
	// Функция возвращает все кординаты всех кораблей союзников
	// TODO подумать над результатом как соответствие
	
	КоординатыКораблей = Новый Массив;
	
	Для Каждого Корабль Из Корабли Цикл		
		
		ПозицияКорабля    = ПозицияКорабля(Корабль);
		КоординатыКорабля = МассивКоординатКорабля(ПозицияКорабля, Истина);
		
		Для Каждого Элемент Из КоординатыКорабля Цикл
			КоординатыКораблей.Добавить(Элемент);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КоординатыКораблей; 
	
КонецФункции

Функция КоординатыКораблейСоюзников()
	
	// Функция возвращает все кординаты всех кораблей союзников
	// TODO подумать над результатом как соответствие
	
	КоординатыКораблей = Новый соответствие;
	
	Для Каждого Корабль Из Корабли Цикл		
		
		ПозицияКорабля    = ПозицияКорабля(Корабль);
		КоординатыКорабля = МассивКоординатКорабля(ПозицияКорабля, Истина);
		
		Значение = Новый Структура;
		Значение.Вставить("Корабль"   , Корабль);
		Значение.Вставить("Координаты", КоординатыКорабля);
		
		КоординатыКораблей.Вставить(Корабль["Id"], Значение);
		
	КонецЦикла;
	
	Возврат КоординатыКораблей; 
	
КонецФункции

Функция КоординатыКораблейПротивников()
	
	// Функция возвращает все кординаты всех кораблей противников
	// TODO подумать над результатом как соответствие
	
	КоординатыКораблей = Новый Массив;
	
	Для Каждого Корабль Из КораблиПротивника Цикл
		
		ПозицияКорабля    = ПозицияКорабля(Корабль);
		КоординатыКорабля = МассивКоординатКорабля(ПозицияКорабля, Истина);
		
		Для Каждого Элемент Из КоординатыКорабля Цикл
			КоординатыКораблей.Добавить(Элемент);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КоординатыКораблей; 	
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Команды

#Область Команды

Процедура ВыбратьКорабль(Идентификатор, Позиция, Оборудование)
	
	Команда = ВыборКорабля(Идентификатор, Позиция, Оборудование);
	
	ДобавитьКоманду(Команда)
	
КонецПроцедуры

Процедура ДобавитьКоманду(Команда)
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоДрафт = Истина Тогда
		
		Если Ответ["Ships"] = Неопределено Тогда
			Ответ.Вставить("Ships", Новый Массив());
		КонецЕсли;
		
		Ответ["Ships"].Добавить(Команда);
		
	Иначе
		
		Если Ответ["UserCommands"] = Неопределено Тогда
			Ответ.Вставить("UserCommands", Новый Массив());
		КонецЕсли;
		
		Ответ["UserCommands"].Добавить(Команда);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыборКорабля(CompleteShipId, Знач Position = NULL, Equipment = Неопределено)
	
	Если ТипЗнч(Position) = Тип("Структура") Тогда
		Position = ВекторСтрокой(Position);
	КонецЕсли;
	
	ВыборКорабля = Новый соответствие;
	ВыборКорабля.Вставить("Position"	  , Position);
	ВыборКорабля.Вставить("CompleteShipId", CompleteShipId);
	
	Если ТипЗнч(Equipment) = Тип("Массив") Тогда
		ВыборКорабля.Вставить("Equipment", Equipment);
	КонецЕсли;
	
	Возврат ВыборКорабля; 
	
КонецФункции

Функция Автопилот(КлассКорабль, Цель)
	
	Результат = Новый Структура();
	Результат.Вставить("Command"	, "MOVE");
	Результат.Вставить("Parameters" , НовыйПараметрыАвтопилота(КлассКорабль, Цель));
	
	Возврат Результат;
	
КонецФункции

Функция Ускорение(Корабль, Вектор)
	
	Результат = Новый Структура();
	Результат.Вставить("Command"	, "ACCELERATE");
	Результат.Вставить("Parameters" , НовыйПараметрыУскорения(Корабль, Вектор));
	
	Возврат Результат;
	
КонецФункции

Функция Выстрел(Корабль, Цель, Орудие = Неопределено)
	
	Если Орудие = Неопределено Тогда
		Орудие = ОсновноеОрудиеКорабля(Корабль);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Command"	, "ATTACK");
	Результат.Вставить("Parameters" , НовыйПараметрыВыстрела(Корабль, Орудие, Цель));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Сущности

#Область Сущности

Функция НовыйВектор(Знач x, Знач y = Неопределено, Знач z = Неопределено)
	
	Вектор = Новый Структура("x, y, z", 0,0,0);
	
	Если ТипЗнч(x) = Тип("Строка") Тогда
		
		ВекторСтрока    = x;
		ЭлементыВектора = Новый Массив;
		
		Для Сч = 1 По 3 Цикл
			Разделитель   = Найти(ВекторСтрока, "/");
			Если Разделитель = 0 Тогда
				ЭлементыВектора.Добавить(ВекторСтрока);
				Прервать;
			КонецЕсли;
			ЭлементВектора = Лев(ВекторСтрока, Разделитель - 1);
			ЭлементыВектора.Добавить(ЭлементВектора);
			ВекторСтрока = Сред(ВекторСтрока, Разделитель + 1)
		КонецЦикла;
		
		Если ЭлементыВектора.Количество() = 3 Тогда
			Вектор.x = Число(ЭлементыВектора[0]);
			Вектор.y = Число(ЭлементыВектора[1]);
			Вектор.z = Число(ЭлементыВектора[2]);
		КонецЕсли
		
	ИначеЕсли ТипЗнч(x) = Тип("Структура") Тогда
		
		Возврат x;
		
	Иначе
		
		Вектор.x = x;
		Вектор.y = y;
		Вектор.z = z;
		
	КонецЕсли;
	
	Возврат Вектор;
	
КонецФункции

Функция ВекторСтрокой(Вектор)
	
	Если ТипЗнч(Вектор) = Тип("Строка") Тогда
		Возврат Вектор;
	КонецЕсли;
	
	Возврат СтрШаблон("%1/%2/%3", Вектор.x, Вектор.y, Вектор.z); 
	
КонецФункции

Функция НовыйПараметрыУскорения(Корабль, Вектор)
	
	ПараметрыАвтопилота = Новый Структура;
	ПараметрыАвтопилота.Вставить("Id"	 , Корабль["Id"]); 
	ПараметрыАвтопилота.Вставить("Vector", ВекторСтрокой(Вектор));
	
	Возврат ПараметрыАвтопилота;
	
КонецФункции

Функция НовыйПараметрыАвтопилота(Корабль, Вектор)
	
	ПараметрыАвтопилота = Новый Структура;
	ПараметрыАвтопилота.Вставить("Id"	 , Корабль["Id"]); 
	ПараметрыАвтопилота.Вставить("Target", ВекторСтрокой(Вектор));
	
	Возврат ПараметрыАвтопилота;
	
КонецФункции

Функция НовыйПараметрыВыстрела(Корабль, Орудие, Цель)
	
	ПараметрыВыстрела = Новый Структура;
	ПараметрыВыстрела.Вставить("Id"		, Корабль["Id"]);
	ПараметрыВыстрела.Вставить("Name"	, Орудие["Name"]);
	ПараметрыВыстрела.Вставить("Target"	, ВекторСтрокой(Цель));
	
	Возврат ПараметрыВыстрела;
	
КонецФункции

Функция НовыйОтвет()
	
	Ответ = Новый Соответствие;
	
	Если ЭтоДрафт = Истина Тогда
		
		Ответ.Вставить("Ships"	, Новый Массив);
		Ответ.Вставить("Message", "");
		
	Иначе
		
		Ответ.Вставить("UserCommands", Новый Массив);
		Ответ.Вставить("Message"     , "");
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Вычисления

#Область Вычисления

Функция РасстояниеЧебышев(Знач Позиция1, Знач Позиция2)
	
	Если ТипЗнч(Позиция1) = Тип("Строка") Тогда
		Позиция1 = НовыйВектор(Позиция1);
	КонецЕсли;
	
	Если ТипЗнч(Позиция2) = Тип("Строка") Тогда
		Позиция2 = НовыйВектор(Позиция2);
	КонецЕсли;
	
	РасстояниеX = МодульЧисла(Позиция2.X - Позиция1.X);
	РасстояниеY = МодульЧисла(Позиция2.Y - Позиция1.Y);
	РасстояниеZ	= МодульЧисла(Позиция2.Z - Позиция1.Z);
	
	Расстояние = Макс(РасстояниеX, РасстояниеY, РасстояниеZ); 
	
	Возврат Расстояние
	
КонецФункции

Функция РасстояниеМанхэттен(Знач Позиция1, Знач Позиция2)
	
	Если ТипЗнч(Позиция1) = Тип("Строка") Тогда
		Позиция1 = НовыйВектор(Позиция1);
	КонецЕсли;
	
	Если ТипЗнч(Позиция2) = Тип("Строка") Тогда
		Позиция2 = НовыйВектор(Позиция2);
	КонецЕсли;
	
	РасстояниеX = МодульЧисла(Позиция2.X - Позиция1.X);
	РасстояниеY = МодульЧисла(Позиция2.Y - Позиция1.Y);
	РасстояниеZ	= МодульЧисла(Позиция2.Z - Позиция1.Z);
	
	Расстояние = РасстояниеX + РасстояниеY + РасстояниеZ; 
	
	Возврат Расстояние
	
КонецФункции

Функция МодульВектора(Знач Вектор)
	
	Если ТипЗнч(Вектор) = Тип("Строка") Тогда
		Вектор = НовыйВектор(Вектор);
	КонецЕсли;
	
	Возврат Макс(
	МодульЧисла(Вектор.X), 
	МодульЧисла(Вектор.Y), 
	МодульЧисла(Вектор.Z));
	
КонецФункции

Функция МодульЧисла(Значение)
	
	Возврат Макс(Значение, - Значение);
	
КонецФункции

Функция СуммаВекторов(Знач Вектор1, Знач Вектор2)
	
	Вектор1 = НовыйВектор(Вектор1);
	Вектор2 = НовыйВектор(Вектор2);
	
	Возврат НовыйВектор(
	Вектор1.X + Вектор2.X, 
	Вектор1.Y + Вектор2.Y, 
	Вектор1.Z + Вектор2.Z);
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Служебные процедуры и функции

#Область СлужебныеПроцедурыиФункции

Процедура ЦиклЖизни(ТестовыеАргументы = Неопределено)
	
	Пока Истина Цикл
		
		Если ТестовыеАргументы = Неопределено Тогда
			
			// Входящий поток
			
			ВходныеДанные  = Консоль.ПрочитатьСтроку();
			ВыходнойФайл = Неопределено;
			
		Иначе
			
			// Отладка через файл
			
			ВходнойФайл = ТестовыеАргументы[0];
			ВыходнойФайл = ТестовыеАргументы[1];
			Чтение = Новый ЧтениеТекста(ВходнойФайл);
			ВходныеДанные = Чтение.Прочитать();
			Чтение.Закрыть();
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВходныеДанные) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			Состояние = ПарсерJSON.ПрочитатьJSON(ВходныеДанные);
			
			ИнициализироватьОкружение(ВходныеДанные);
			
			Если ЭтоДрафт Тогда
				ВыполнитьСценарийДрафт();
			Иначе
				ВыполнитьСценарий();
			КонецЕсли;
			
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			ПодготовитьОтветОписаниеОшибки(ОписаниеОшибки);		
			
		КонецПопытки;
		
		ВывестиВалидныйОтвет(ВыходнойФайл);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьОкружение(ВходныеДанные)
	
	// Служебные
	ЭтоДрафт 	   = Состояние["MapSize"] <> Неопределено;
	НомерИтерации  = НомерИтерации + 1;
	НачалоИтерации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если КтоКого = неопределено Тогда
		КтоКого = Новый Соответствие;
	КонецЕсли;
	// Новые
	
	Отладка = Новый Массив();
	Ответ   = НовыйОтвет();
	
	// Представления
	
	Корабли 		  = Состояние["My"];
	КораблиПротивника = Состояние["Opponent"]; 	
	
	Если ЭтоДрафт Тогда
		РазмерКарты = Состояние["MapSize"];
	Иначе
		// Для отладки
		Если РазмерКарты = Неопределено Тогда
			РазмерКарты = 30;
		КонецЕсли	
	КонецЕсли;
	
	// Ищем рельсу в начале боя
	
	Если НомерИтерации = 2 Тогда
		Для Каждого Корабль Из КораблиПротивника Цикл
			Если Корабль["Health"] = 3 Тогда
				КораблиПротивникаЛекс.Добавить(Корабль["Id"]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВалидныйОтвет(ТестовыйФайл = Неопределено)
	
	МаксимальнаяДлинаСообщения = 2000;
	
	ВалидныйОтветСтрока = ПарсерJSON.записатьJSON(Ответ);
	ВалидныйОтветСтрока = СтрЗаменить(ВалидныйОтветСтрока, Символы.ПС, "");
	ВалидныйОтветСтрока = СтрЗаменить(ВалидныйОтветСтрока, " ", "");
	
	КонецИтерации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ИтерацияВМиллисекундах  = КонецИтерации - НачалоИтерации;	
	
	НачалоСообщения = """Message"":""";
	ОтладочноеСообщение = "in:" + НомерИтерации + ";it:" + Строка(ИтерацияВМиллисекундах) + ";";
	Для Каждого Элемент Из Отладка Цикл
		ОтладочноеСообщение = ОтладочноеСообщение + Элемент + ";";
	КонецЦикла;
	
	JSON = Новый Структура;
	JSON.Вставить("k", ОтладочноеСообщение);
	
	ЭкранированыйТекст = ПарсерJSON.записатьJSON(JSON);
	ЭкранированыйТекст = СтрЗаменить(ЭкранированыйТекст, Символы.ПС, "");
	ЭкранированыйТекст = СтрЗаменить(ЭкранированыйТекст, " ", "");
	
	ОтладочноеСообщение = Сред(ЭкранированыйТекст, 7, СтрДлина(ЭкранированыйТекст) - 8);
	
	// обработка отладночго сообщения
	
	ОтладочноеСообщение = СтрЗаменить(ОтладочноеСообщение, Символы.ПС, "");
	ОтладочноеСообщение = СтрЗаменить(ОтладочноеСообщение, " ", "");
	
	// попытка вставить сообщение
	
	ВалидныйОтветСтрокаССообщением = СтрЗаменить(ВалидныйОтветСтрока, НачалоСообщения, НачалоСообщения + ОтладочноеСообщение);
	ДлинаСообщения = СтрДлина(ВалидныйОтветСтрокаССообщением);
	
	Если ДлинаСообщения > МаксимальнаяДлинаСообщения Тогда
		
		ПревышениеДлины = ДлинаСообщения - МаксимальнаяДлинаСообщения;	
		ДлинаОтладочногоСообщения = СтрДлина(ОтладочноеСообщение);
		
		Если ДлинаОтладочногоСообщения >= ПревышениеДлины Тогда
			
			ОтладочноеСообщение 			= Лев(ОтладочноеСообщение, ДлинаОтладочногоСообщения - ПревышениеДлины);
			ВалидныйОтветСтрокаПослеОбрезки = СтрЗаменить(ВалидныйОтветСтрока, НачалоСообщения, НачалоСообщения + ОтладочноеСообщение);
			
			Если СтрДлина(ВалидныйОтветСтрокаПослеОбрезки) <= МаксимальнаяДлинаСообщения Тогда
				ВалидныйОтветСтрока = ВалидныйОтветСтрокаПослеОбрезки;
			КонецЕсли
		КонецЕсли;
		
	Иначе
		
		ВалидныйОтветСтрока = ВалидныйОтветСтрокаССообщением;
		
	КонецЕсли;
	
	Если ТестовыйФайл = Неопределено Тогда
		Консоль.ВывестиСтроку(ВалидныйОтветСтрока);
	Иначе
		Запись = Новый ЗаписьТекста(ТестовыйФайл);
		Запись.Записать(ВалидныйОтветСтрока);
		Запись.Закрыть();
	КонецЕсли	
	
КонецПроцедуры

Процедура ПодготовитьОтветОписаниеОшибки(ОписаниеОшибки)
	
	Ответ = Новый Соответствие();
	Ответ.Вставить("UserCommands", Новый Массив());
	Ответ.Вставить("Message"     , ТранслитироватьСтроку(ОписаниеОшибки));
	
КонецПроцедуры

Функция МассивСоответствийВТаблицуЗначений(Массив)
	
	Результат = Новый ТаблицаЗначений();
	Если Массив.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	//Считаем что все соответствия одинаковы по составу полей
	
	ПервоеСоответствие = Массив[0];
	Для Каждого Элемент Из ПервоеСоответствие Цикл
		Результат.Колонки.Добавить(Элемент.Ключ);
	КонецЦикла;
	Результат.Колонки.Добавить("ИзначальноеСоответствие");
	
	Для Каждого Соответстие Из Массив Цикл
		НоваяСтрока = Результат.Добавить();
		Для Каждого Колонка из Результат.Колонки Цикл
			Ключ = Колонка.Имя;
			НоваяСтрока[Ключ] = Соответстие[Ключ];
		КонецЦикла;
		НоваяСтрока.ИзначальноеСоответствие = Соответстие;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаЗначенийВМассивСоответствий(Таблица)
	
	Результат = Новый Массив;
	
	СписокКолонок = "";
	Для Каждого Колонка из Таблица.Колонки Цикл
		СписокКолонок = СписокКолонок + ?(ПустаяСтрока(СписокКолонок), "", ", ") + Колонка.Имя;	
	КонецЦикла;
	
	Для Каждого Строка из Таблица Цикл
		Соответствие = Новый Соответствие();
		Для Каждого Колонка из Таблица.Колонки Цикл
			Соответствие.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		Результат.Добавить(Соответствие);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТранслитироватьСтроку(Знач Строка)
	
	Для Каждого Элемент Из ПравилоТранслитерации() Цикл
		Строка = СтрЗаменить(Строка, Элемент.Ключ, Элемент.Значение);
		Строка = СтрЗаменить(Строка, ВРег(Элемент.Ключ), ВРег(Элемент.Значение));
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Функция ПравилоТранслитерации()
	
	ПравилоТранслитерации = Новый Соответствие;
	ПравилоТранслитерации.Вставить("а", "a");	
	ПравилоТранслитерации.Вставить("б", "b");
	ПравилоТранслитерации.Вставить("в", "v");
	ПравилоТранслитерации.Вставить("г", "g");
	ПравилоТранслитерации.Вставить("д", "d");
	ПравилоТранслитерации.Вставить("е", "e");
	ПравилоТранслитерации.Вставить("ё", "e");
	ПравилоТранслитерации.Вставить("ж", "zh");
	ПравилоТранслитерации.Вставить("з", "z");
	ПравилоТранслитерации.Вставить("и", "i");
	ПравилоТранслитерации.Вставить("й", "y");
	ПравилоТранслитерации.Вставить("к", "k");
	ПравилоТранслитерации.Вставить("л", "l");
	ПравилоТранслитерации.Вставить("м", "m");
	ПравилоТранслитерации.Вставить("н", "n");
	ПравилоТранслитерации.Вставить("о", "o");
	ПравилоТранслитерации.Вставить("п", "p");
	ПравилоТранслитерации.Вставить("р", "r");
	ПравилоТранслитерации.Вставить("с", "s");
	ПравилоТранслитерации.Вставить("т", "t");
	ПравилоТранслитерации.Вставить("у", "u");
	ПравилоТранслитерации.Вставить("ф", "f");
	ПравилоТранслитерации.Вставить("х", "h");
	ПравилоТранслитерации.Вставить("ц", "c");
	ПравилоТранслитерации.Вставить("ч", "ch");
	ПравилоТранслитерации.Вставить("ш", "sh");
	ПравилоТранслитерации.Вставить("щ", "shch");
	ПравилоТранслитерации.Вставить("ъ", "");
	ПравилоТранслитерации.Вставить("ы", "y");
	ПравилоТранслитерации.Вставить("ь", "");
	ПравилоТранслитерации.Вставить("э", "e");
	ПравилоТранслитерации.Вставить("ю", "yu");
	ПравилоТранслитерации.Вставить("я", "ya");
	
	Возврат ПравилоТранслитерации;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Основная программа

Консоль       = Новый Консоль();
ПарсерJSON    = Новый ПарсерJSON();
НомерИтерации = 0;
ЭтоДрафт	  = Ложь;
НомерИтерацииДвижение = 0;
КораблиПротивникаЛекс = Новый Массив;

Если АргументыКоманднойСтроки.Количество() > 0 Тогда
	
	ЦиклЖизни(АргументыКоманднойСтроки);
	
Иначе
	
	ЦиклЖизни();
	
КонецЕсли
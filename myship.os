#Использовать JSON

Перем Консоль;
Перем ПарсерJSON;
Перем НачалоИтерации;
Перем НомерИтерации;
Перем Отладка;

Перем Состояние;
Перем Ответ;
Перем Корабли;
Перем КораблиПротивника;

/////////////////////////////////////////////////////
// Сценарий

Процедура ВыполнитьСценарий()

	РасчитатьСценарииСтрельбы();
	Возврат;

	// Если противник разряжен
	
	РасстояниеМеждуКораблямиПротивника = 0;
	Для Каждого Противник Из КораблиПротивника Цикл
		Для Каждого Противник2 Из КораблиПротивника Цикл
			РасстояниеМеждуКораблямиПротивника = РасстояниеМеждуКораблямиПротивника + 
				РасстояниеЧебышев(
					НовыйВектор(Противник["Position"]), 
					НовыйВектор(Противник2["Position"])
				);
		КонецЦикла;
	КонецЦикла;	

	РасстояниеМеждуКораблямиПротивника = РасстояниеМеждуКораблямиПротивника / КораблиПротивника.Количество();

	// Обработка движения кораблей

	ЦельПеремещенияИндекс = 0;

	Для Каждого Корабль Из Корабли Цикл

		// Выбор цели для перемещения

		ЦельПеремещения 	  = КораблиПротивника[ЦельПеремещенияИндекс];
		ЦельПеремещенияИндекс = (ЦельПеремещенияИндекс + 1) % КораблиПротивника.Количество();

		// Если группа не разяряженная используем АП иначе нет

		КомандаПеремещения = Неопределено;

		Если ПолучитьРазрешенныйВыстрел(Корабль, ЦельПеремещения) <> Неопределено
			И РасстояниеМеждуКораблямиПротивника < 20 Тогда
			КомандаПеремещения = Ускорение(Корабль, НачальнаяПозицияКорабля(Корабль));
		Иначе				
			КомандаПеремещения = Ускорение(Корабль, ЦельПеремещения["Position"]);
		КонецЕсли;

		ДобавитьКоманду(КомандаПеремещения); 

	КонецЦикла;

	// Оработка стрельбы

	ЦельАтаки = ЦельАтаки();

	Для Каждого Корабль Из Корабли Цикл

		Выстрел = ПолучитьРазрешенныйВыстрел(Корабль, ЦельАтаки);
		
		Если Выстрел = Неопределено Тогда
			Для Каждого Враг Из КораблиПротивника Цикл
				Выстрел = ПолучитьРазрешенныйВыстрел(Корабль, Враг);
				Если Выстрел <> Неопределено Тогда
					Прервать;	
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		ДобавитьКоманду(Выстрел);

	КонецЦикла;
	
	//Отладка.Добавить(ПарсерJSON.ЗаписатьJSON(Ответ));
	
КонецПроцедуры

/////////////////////////////////////////////////////
// Процедуры и функции обработки сценария

#Область ПроцедурыИФункцииОбработкиСценария

Функция ПолучитьРазрешенныйВыстрел(Корабль, Враг, Знач Орудие = Неопределено)

	Если Орудие = Неопределено Тогда
		Орудие = ОсновноеОрудиеКорабля(Корабль);
	КонецЕсли;

	ПоправкаНаСближение = 1;

	РасстояниеДоТекущейПозицииВрага = РасстояниеЧебышев(Корабль["Position"], Враг["Position"]);
	
	Если РасстояниеДоТекущейПозицииВрага > 5 Тогда
		ОжидаемоеПоложениеВрага = СуммаВекторов(Враг["Position"], Враг["Velocity"]);
	Иначе // в ближнем бою херачим ьез упреждения
		ОжидаемоеПоложениеВрага = Враг["Position"];
	КонецЕсли;
	ЦельВРадиусеПоражения = Орудие["Radius"] + ПоправкаНаСближение >= РасстояниеЧебышев(Корабль["Position"], ОжидаемоеПоложениеВрага);
	
	//Отладка.Добавить("R_" + ЦельВРадиусеПоражения);
	//Отладка.Добавить("D_" + РасстояниеЧебышев(Корабль["Position"], ОжидаемоеПоложениеВрага));
	//Отладка.Добавить("S_" + Корабль["Position"]);
	//Отладка.Добавить("E_" + Враг["Position"]);
	//Отладка.Добавить("O_" + ВекторСтрокой(ОжидаемоеПоложениеВрага));

	ДружественныйОгонь = ДружественныйОгонь(Корабль, ОжидаемоеПоложениеВрага);
	//ДружественныйОгонь = ложь;
	Если ЦельВРадиусеПоражения И Не ДружественныйОгонь Тогда
		Возврат Выстрел(Корабль, ОжидаемоеПоложениеВрага, Орудие);
	Иначе
		Возврат Неопределено;
	КонецЕсли
	
КонецФункции

Функция ДружественныйОгонь(Корабль, Цель)

	//ТочкаНачалаВыстрела = Корабль["Position"]; // по тупому
	ТочкаНачалаВыстрела = ТочкаНачалаВыстрела(Корабль, Цель); //по манхетонской метрике"
	
	ТочкиЛучаПоБрезенхему = ТочкиЛучаПоБрезенхему(ТочкаНачалаВыстрела, Цель);

	Для Каждого Союзник Из Корабли Цикл

		Если Корабль["Id"] = Союзник["Id"] Тогда
			Продолжить; // себе в ногу вроде не выстрелим
		КонецЕсли;

		ОжидаемеоеПоложениеСоюзника = СуммаВекторов(Союзник["Position"], Союзник["Velocity"]);
		//TODO добавить ускорение текущего хода. Должны его знать, так как сначала ходим потом стрелям

		ЦепляемСвоего = Ложь;
		Для Каждого Точка Из ТочкиЛучаПоБрезенхему Цикл
			//Если РасстояниеЧебышев(ОжидаемеоеПоложениеСоюзника, Точка) <= 1 Тогда
			Хуйня = Истина;

			Если НЕ (ОжидаемеоеПоложениеСоюзника.x - Точка.x = 0 или ОжидаемеоеПоложениеСоюзника.x - Точка.x = 1) Тогда
				Хуйня = Ложь;
			КонецЕсли;
			Если НЕ (ОжидаемеоеПоложениеСоюзника.y - Точка.y = 0 или ОжидаемеоеПоложениеСоюзника.y - Точка.y = 1) Тогда
				Хуйня = Ложь;
			КонецЕсли;
			Если НЕ (ОжидаемеоеПоложениеСоюзника.z - Точка.z = 0 или ОжидаемеоеПоложениеСоюзника.z - Точка.z = 1) Тогда
				Хуйня = Ложь;
			КонецЕсли;

			Если Хуйня Тогда 
				ЦепляемСвоего = Истина;
			КонецЕсли
		КонецЦикла;
		Если ЦепляемСвоего Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

Функция ЦельАтаки()

	// 1 Выбрать самого дохлого
	ТЗКорабли = МассивСоответствийВТаблицуЗначений(КораблиПротивника);
	ТЗКорабли.Колонки.Добавить("Скорость");
	ТЗКорабли.Колонки.Добавить("Доступность");

	Для Каждого Строка Из ТЗКорабли Цикл
		Строка.Скорость = МодульВектора(Строка.Velocity);

		Строка.Доступность = 0;
		Для Каждого Союзник Из Корабли Цикл
			Если ПолучитьРазрешенныйВыстрел(Союзник, Строка.ИзначальноеСоответствие) <> Неопределено Тогда
				Строка.Доступность = Строка.Доступность + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ТЗКорабли.Сортировать("Доступность УБЫВ, Скорость ВОЗР, Health ВОЗР");
	//ОтсортированныеКорабли = ТаблицаЗначенийВМассивСоответствий(ТЗКорабли);
		
	Возврат ТЗКорабли[0].ИзначальноеСоответствие;
		
	// TODO 2 Среди самых дохлых выбрать самого доступного для наших кораблей

КонецФункции

Функция ТормознойПуть(Знач Скорость)
	
	Если Тип("Число") = ТипЗнч(Скорость) Тогда 
		Скорость = Скорость;
	ИначеЕсли Тип("Строка") = ТипЗнч(Скорость) Тогда
		Скорость = Число(Скорость);
	КонецЕсли;
	
	i = 1;
	j = 0;
	
	МодульСкорости = МодульЧисла(Скорость);
	
	Пока i <= МодульСкорости Цикл 
		j = j + i;
		i = i + 1;
	КонецЦикла;
	
	Возврат ?(Скорость < 0 , j * (-1), j);
	
КонецФункции

/////////////////////////////////////////////////////
// Лучи

Функция ТочкаНачалаВыстрела(Знач Корабль, Знач Цель)

	//Из правил: Бластер стреляет по цели из ближайшей (по манхэттенской метрике) точки корабля
	//Наблюдение: Корабль задается точкой с минимальными координатами (левой верхней)

	ТочкаНачалаВыстрела = НовыйВектор(Корабль["Position"]);
	ТочкаЦели = НовыйВектор(Корабль["Position"]);

	ЦельСправа = ТочкаНачалаВыстрела.x < ТочкаЦели.x;
	Если ЦельСправа Тогда
		ТочкаНачалаВыстрела.x = ТочкаНачалаВыстрела.x + 1;
	КонецЕсли;
	
	ЦельСверху = ТочкаНачалаВыстрела.y < ТочкаЦели.y;
	Если ЦельСверху Тогда
		ТочкаНачалаВыстрела.y = ТочкаНачалаВыстрела.y + 1;
	КонецЕсли;

	ЦельСбоку = ТочкаНачалаВыстрела.z < ТочкаЦели.z;
	Если ЦельСбоку Тогда // сам хз, с какого боку
		ТочкаНачалаВыстрела.z = ТочкаНачалаВыстрела.z + 1;
	КонецЕсли;

	Возврат ТочкаНачалаВыстрела;

КонецФункции

Функция ТочкиЛучаПоБрезенхему(Знач Начало, Знач Конец)
	
	Результат = Новый Массив;
	
	Начало = НовыйВектор(Начало);
	Конец = НовыйВектор(Конец);
	
	Координаты = Новый ТаблицаЗначений;
	Координаты.Колонки.Добавить("Имя");
	Координаты.Колонки.Добавить("Расстояние");
	
	Строка = Координаты.Добавить();
	Строка.Имя = "x";
	Строка.Расстояние = МодульЧисла(Начало.x - Конец.x);
	
	Строка = Координаты.Добавить();
	Строка.Имя = "y";
	Строка.Расстояние = МодульЧисла(Начало.y - Конец.y);
	
	Строка = Координаты.Добавить();
	Строка.Имя = "z";
	Строка.Расстояние = МодульЧисла(Начало.z - Конец.z);
	
	Координаты.Сортировать("Расстояние Убыв");	
	
	Если Начало[Координаты[0].Имя] > Конец[Координаты[0].Имя] Тогда
		Буфер = Начало;
		Начало = Конец;
		Конец = Буфер;
	КонецЕсли;
	
	КоличествоИтераций = Конец[Координаты[0].Имя] - Начало[Координаты[0].Имя];
	Если КоличествоИтераций = 0 Тогда
		Результат.Добавить(Начало);
		Возврат Результат;
	КонецЕсли;
	
	Смещение = Новый Соответствие;
	ТекущаяОшибка = Новый Соответствие;
	ТекущаяКоордината = Новый Соответствие;
	Направление = Новый Соответствие;
	Для ИндексКоординаты = 1 По 2 Цикл
		Смещение[ИндексКоординаты] = МодульЧисла(Конец[Координаты[ИндексКоординаты].Имя] - Начало[Координаты[ИндексКоординаты].Имя]) / КоличествоИтераций;
		ТекущаяОшибка[ИндексКоординаты] = 0;
		ТекущаяКоордината[ИндексКоординаты] = Начало[Координаты[ИндексКоординаты].Имя];		
		Направление[ИндексКоординаты] = Конец[Координаты[ИндексКоординаты].Имя] - Начало[Координаты[ИндексКоординаты].Имя];
		Направление[ИндексКоординаты] = ?(Направление[ИндексКоординаты] > 0, 1, -1);
	КонецЦикла;
	
	Для ГланаяКоордината = Начало[Координаты[0].Имя] По Конец[Координаты[0].Имя] Цикл
		
		НовыйВектор = НовыйВектор("0/0/0");
		НовыйВектор[Координаты[0].Имя] = ГланаяКоордината;
		
		Для ИндексКоординаты = 1 По 2 Цикл
			НовыйВектор[Координаты[ИндексКоординаты].Имя] = ТекущаяКоордината[ИндексКоординаты];
			ТекущаяОшибка[ИндексКоординаты] = ТекущаяОшибка[ИндексКоординаты] + Смещение[ИндексКоординаты];
			Если ТекущаяОшибка[ИндексКоординаты] >= 0.5 Тогда
				ТекущаяОшибка[ИндексКоординаты] = ТекущаяОшибка[ИндексКоординаты] - 1;
				ТекущаяКоордината[ИндексКоординаты] = ТекущаяКоордината[ИндексКоординаты] + Направление[ИндексКоординаты];
			КонецЕсли;
		КонецЦикла;
				
		Результат.Добавить(НовыйВектор);
		
	КонецЦикла;

	Возврат Результат;

КонецФункции

/////////////////////////////////////////////////////
// Стрельба
// 1. Расчитать таблицу для системы принятия решений, таблица содежит показатели доступности 
//	  и иные характеристикии для принятия решения
//	  - Инцииализировать коллекцию структруы (....)
//	  Для Каждого противника
//    - Расчитать доступность, как минимальное расстояние между ячейками кораблей не превышающее радиус поражения
//	  - 	Иначе продолжить
//	  - Расчитать лучи брезенхема для каждой точки внутри радиуса поражения, для иных точек (сформулированых эвистически)
//			Учитвая факт, что мы стрляем из ближайшей точки корабля к выбранной для поражения точки
//	  - Расчитать доступность точки, как луч пересекает противника (любого, цель) и не пересекает союзника
//	  - 	Иначе продолжить
//	  - Заполнить иные показатели для системы принятия решений (здоровье, скорость)
//
// Результом является коллекция, содержащая набор точек для стрельбы, гарантировано доступных, пересекающих противников и не пересекающих союзников
//
// 2. Принятие решения
//	Для Каждого Корабля
//	- Получить достпных себе противников
//  - Анализировать их достпность для товарищей
//	- Анализировать их иные характеристики
//	- Выбрать точку для стрельбы из достпных
//	- принять решение  

Функция РасчитатьСценарииСтрельбы()

	СценарииСтрельбы = Новый ТаблицаЗначений;

	Для Каждого Корабль Из Корабли Цикл
		Для Каждого КорабльПротивника Из КораблиПротивника Цикл	

			СценарийСтрельбы = РасчитатьСценарийСтрельбы(Корабль, КорабльПротивника);


		КонецЦикла;
	КонецЦикла;

КонецФункции

Функция РасчитатьСценарийСтрельбы(Корабль, КорабльПротивника)

	Орудие = ОсновноеОрудиеКорабля(Корабль);
	
	КорабльПозиция 			 = ПозицияКорабля(Корабль);
	КорабльПротивникаПозиция = ПозицияКорабля(КорабльПротивника);

	// Расчитать доступность, как минимальное расстояние между ячейками кораблей не превышающее радиус поражения

	Расстояние = РасстояниеМеждуКораблямиОбъект(КорабльПозиция, КорабльПротивникаПозиция);
	Если Расстояние.Значение >= Орудие["Radius"] Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Расчитать лучи брезенхема для каждой точки внутри радиуса поражения, для иных точек (сформулированых эвистически)
	// Учитвая факт, что мы стрляем из ближайшей точки корабля к выбранной для поражения точки

	МКПротивника = МассивКоординатКорабля(КорабльПротивникаПозиция);
	Для Каждого ЯчейкаКорабляПротивника Из МКПротивника Цикл

		// Расстояние между ближайшей точкой нашего корабля и заданой точкой (модулем корабля противника)

		Расстояние = РасстояниеМеждуКорабльИПозиция(КорабльПозиция, ЯчейкаКорабляПротивника);
		Если Расстояние.Значение >= Орудие["Radius"] Тогда
			Продолжить;
		КонецЕсли;		

		Луч = ТочкиЛучаПоБрезенхему(Расстояние.ЯчейкаКорабля, ЯчейкаКорабляПротивника);

		// Расчитать доступность точки, как луч пересекает противника (любого, цель) и не пересекает союзника
		// Иначе продолжить

	КонецЦикла;

КонецФункции

/////////////////////////////////////////////////////
// Функции связаные с кораблем

Функция ОсновноеОрудиеКорабля(Корабль)
	
	Оборудование = Корабль["Equipment"];
	
	Для Каждого Элемент Из Оборудование Цикл
		
		Если Элемент["Type"] = 1 Тогда
			Возврат Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;	
	
КонецФункции

Функция ДвигательКорабля(Корабль)
	
	Оборудование = Корабль["Equipment"];
	
	Для Каждого Элемент Из Оборудование Цикл
		
		Если Элемент["Type"] = 2 Тогда
			Возврат Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция НачальнаяПозицияКорабля(Корабль)
	
	ПоцияКОтступлению = НовыйВектор(0, 0, 0);
	
	УголИгрока1 = Истина;
	
	Попытка
		ПорядковыйНомер = Число(Корабль["Id"]);
		Если ПорядковыйНомер >= 10000 Тогда
			ПорядковыйНомер = ПорядковыйНомер - 10000;
			УголИгрока1 = Ложь;
		КонецЕсли;
	Исключение
		ПорядковыйНомер = 0;
	КонецПопытки;
	
	Если УголИгрока1 Тогда
		ПоцияКОтступлению = НовыйВектор(ПорядковыйНомер * 2, 0, 0);	
	Иначе
		ПоцияКОтступлению = НовыйВектор(20 + (ПорядковыйНомер * 2), 28, 28);	
	КонецЕсли;
	
	Возврат ПоцияКОтступлению;
	
КонецФункции

Функция СкоростьКорабля(Корабль, Педполагаемая = Истина)

	Если Корабль = Неопределено
		ИЛИ Корабль["Id"] = Неопределено 
		ИЛИ Корабль["Velocity"] = Неопределено Тогда
		ВызватьИсключение "Непредполагаемое значение параметра №1";
	КонецЕсли;

	СкоростьКорабля = НовыйВектор(Корабль["Velocity"]);

	Если Педполагаемая = Истина Тогда

		// Для своих кораблей

		Для Каждого Команда Из Ответ["UserCommands"] Цикл
		
			Если Команда["Command"] = "ACCELERATE"
				И Команда["Parameters"]["Id"] = Корабль["Id"] Тогда
				ВекторУскорения = НовыйВектор(Команда["Parameters"]["Vector"]);
				СкоростьКорабля = СуммаВекторов(СкоростьКорабля, ВекторУскорения);
				Прервать;
			КонецЕсли

		КонецЦикла;

		// TODO Для чужих, можно учитвать ограничения тормозного пути

	КонецЕсли;

	Возврат СкоростьКорабля;

КонецФункции

Функция ПозицияКорабля(Корабль, Педполагаемая = Истина)

	Если Корабль = Неопределено
		ИЛИ Корабль["Id"] = Неопределено 
		ИЛИ Корабль["Velocity"] = Неопределено Тогда
		ВызватьИсключение "Непредполагаемое значение параметра №1";
	КонецЕсли;

	ПозицияКорабля = НовыйВектор(Корабль["Position"]);

	Если Педполагаемая = Истина Тогда

		СкоростьКорабля = СкоростьКорабля(Корабль, Педполагаемая);
		ПозицияКорабля  = СуммаВекторов(ПозицияКорабля, СкоростьКорабля);

	КонецЕсли;

	Возврат ПозицияКорабля;

КонецФункции

Функция ПозицияКорабляМассивКоординат(Корабль, Педполагаемая = Истина)

	ПозицияКорабля = ПозицияКорабля(Корабль, Педполагаемая);

	Возврат МассивКоординатКорабля(ПозицияКорабля);

КонецФункции

Функция МассивКоординатКорабля(Знач ПозицияКорабля, ЭлементыСтроки = Ложь)

	//	Функция получает все координаты корабля, по его позиции согласно вводу

	Если ТипЗнч(ПозицияКорабля) = Тип("Строка") Тогда
		ПозицияКорабля = НовыйВектор(ПозицияКорабля);
	КонецЕсли;

	МассивКоординат = Новый Массив;
	МассивКоординат.Добавить(ПозицияКорабля);
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y   , ПозицияКорабля.Z	));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X 	 , ПозицияКорабля.Y +1, ПозицияКорабля.Z	));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y +1, ПозицияКорабля.Z	));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X    , ПозицияКорабля.Y   , ПозицияКорабля.Z + 1));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y   , ПозицияКорабля.Z + 1));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X 	 , ПозицияКорабля.Y +1, ПозицияКорабля.Z + 1));
	МассивКоординат.Добавить(НовыйВектор(ПозицияКорабля.X + 1, ПозицияКорабля.Y +1, ПозицияКорабля.Z + 1));

	Если ЭлементыСтроки Тогда

		Для Сч = 0 По МассивКоординат.Колчиество() - 1 Цикл
			МассивКоординат.Вставить(Сч, ВекторСтрокой(МассивКоординат[Сч]));
		КонецЦикла;

	КонецЕсли;

	Возврат МассивКоординат;

КонецФункции

Функция РасстояниеМеждуКораблямиОбъект(Знач ПозицияКорабля1, Знач ПозицияКорабля2)

	//	Функция расчитывает расстояние между кораблями, как сложными объектами
	//  возвращает:
	//	1. минимальное значение расстояния и координаты ближайших точек,
	//  2. максимальное значение расстояния и координаты дальних точек
	//  Вычисленные точки могут использоваться в сценариях стрельбы и целеуказания

	Если ТипЗнч(ПозицияКорабля1) = Тип("Строка") Тогда
		ПозицияКорабля1 = НовыйВектор(ПозицияКорабля1);
	КонецЕсли;

	Если ТипЗнч(ПозицияКорабля2) = Тип("Строка") Тогда
		ПозицияКорабля2 = НовыйВектор(ПозицияКорабля2);
	КонецЕсли;

	// Массивы координат объектов

	МассивКоординатКорабля1 = МассивКоординатКорабля(ПозицияКорабля1);
	МассивКоординатКорабля2 = МассивКоординатКорабля(ПозицияКорабля2);

	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Расстояние");	
	ТаблицаРезультатов.Колонки.Добавить("ЯчейкаКорабля1");
	ТаблицаРезультатов.Колонки.Добавить("ЯчейкаКорабля2");

	// Расчитаем расстояние ячеек кораблей друг от дурга

	Для Каждого ЯчейкаКорабля1 Из МассивКоординатКорабля1 Цикл

		Для Каждого ЯчейкаКорабля2 Из МассивКоординатКорабля2 Цикл

			НоваяСтрока = ТаблицаРезультатов.Добавить(); 
			НоваяСтрока.ЯчейкаКорабля1 = ЯчейкаКорабля1;
			НоваяСтрока.ЯчейкаКорабля2 = ЯчейкаКорабля2;
			НоваяСтрока.Расстояние	   = РасстояниеЧебышев(ЯчейкаКорабля1, ЯчейкаКорабля2);		

		КонецЦикла;		

	КонецЦикла;

	// Формирование объекта результата

	Если ТаблицаРезультатов.Количество() = 0 Тогда
		ВызватьИсключение "Опаньки";
	КонецЕсли;

	РасстояниеМеждуКораблями = Новый Структура;

	// Минимальное расстояние

	ТаблицаРезультатов.Сортировать("Расстояние ВОЗР");

	РасстояниеМеждуКораблями.Вставить("Значение"	  , ТаблицаРезультатов[0].Расстояние);
	РасстояниеМеждуКораблями.Вставить("ЯчейкаКорабля1", ТаблицаРезультатов[0].ЯчейкаКорабля1);
	РасстояниеМеждуКораблями.Вставить("ЯчейкаКорабля2", ТаблицаРезультатов[0].ЯчейкаКорабля2);

	// Максимальное расстояние

	ТаблицаРезультатов.Сортировать("Расстояние УБЫВ");

	РасстояниеМеждуКораблями.Вставить("МаксЗначение"      , ТаблицаРезультатов[0].Расстояние);
	РасстояниеМеждуКораблями.Вставить("МаксЯчейкаКорабля1", ТаблицаРезультатов[0].ЯчейкаКорабля1);
	РасстояниеМеждуКораблями.Вставить("МаксЯчейкаКорабля2", ТаблицаРезультатов[0].ЯчейкаКорабля2);

	// Максимальное от ближайшей ячейки
	
	РасстояниеМеждуКораблями.Вставить("МаксБЗначение"      , РасстояниеМеждуКораблями.Значение);
	РасстояниеМеждуКораблями.Вставить("МаксБЯчейкаКорабля1", РасстояниеМеждуКораблями.ЯчейкаКорабля1);
	РасстояниеМеждуКораблями.Вставить("МаксБЯчейкаКорабля2", РасстояниеМеждуКораблями.ЯчейкаКорабля2);
	
	Для Каждого ЯчейкаКорабля2 Из МассивКоординатКорабля2 Цикл
		Расстояние = РасстояниеЧебышев(РасстояниеМеждуКораблями.ЯчейкаКорабля1, ЯчейкаКорабля2);
		Если Расстояние > РасстояниеМеждуКораблями.МаксБЗначение Тогда
			РасстояниеМеждуКораблями.МаксБЗначение        = Расстояние;
			РасстояниеМеждуКораблями.МаксБЯчейкаКорабля2  = НовыйВектор(ЯчейкаКорабля2);
		КонецЕсли;
	КонецЦикла;

	Возврат РасстояниеМеждуКораблями;

КонецФункции

Функция РасстояниеМеждуКорабльИПозиция(Знач ПозицияКорабля, Знач Позиция)

	//	Функция расчитывает расстояние между кораблем и точкой в системе координта

	Если ТипЗнч(ПозицияКорабля) = Тип("Срока") Тогда
		ПозицияКорабля = НовыйВектор(ПозицияКорабля);
	КонецЕсли;

	Если ТипЗнч(Позиция) = Тип("Срока") Тогда
		Позиция = НовыйВектор(Позиция);
	КонецЕсли;

	// Массивы координат объектов

	МассивКоординатКорабля = МассивКоординатКорабля(ПозицияКорабля);

	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Расстояние");	
	ТаблицаРезультатов.Колонки.Добавить("ЯчейкаКорабля");

	// Расчитаем расстояние ячеек кораблей друг от дурга

	Для Каждого ЯчейкаКорабля Из МассивКоординатКорабля Цикл

		НоваяСтрока = ТаблицаРезультатов.Добавить(); 
		НоваяСтрока.ЯчейкаКорабля = ЯчейкаКорабля;
		НоваяСтрока.Расстояние    = РасстояниеЧебышев(ЯчейкаКорабля, Позиция);		

	КонецЦикла;

	// Формирование объекта результата

	Если ТаблицаРезультатов.Количество() = 0 Тогда
		ВызватьИсключение "Опаньки";
	КонецЕсли;

	// Минимальное расстояние

	ТаблицаРезультатов.Сортировать("Расстояние ВОЗР");
	
	РасстояниеМеждуКораблями = Новый Структура;
	РасстояниеМеждуКораблями.Вставить("Значение"	 , ТаблицаРезультатов[0].Расстояние);
	РасстояниеМеждуКораблями.Вставить("ЯчейкаКорабля", ТаблицаРезультатов[0].ЯчейкаКорабля);

	Возврат РасстояниеМеждуКораблями;

КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Команды

#Область Команды

Процедура ДобавитьКоманду(Команда)

	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Ответ["UserCommands"] = Неопределено Тогда
		Ответ.Вставить("UserCommands", Новый Массив());
	КонецЕсли;
	
	Ответ["UserCommands"].Добавить(Команда);
	
КонецПроцедуры

Функция Автопилот(КлассКорабль, Цель)
	
	Результат = Новый Структура();
	Результат.Вставить("Command"	, "MOVE");
	Результат.Вставить("Parameters" , НовыйПараметрыАвтопилота(КлассКорабль, Цель));
	
	Возврат Результат;
	
КонецФункции

Функция Ускорение(Корабль, КоординатыЦели)
	
	Результат = Новый Структура();
	Результат.Вставить("Command"	, "ACCELERATE");
	Результат.Вставить("Parameters" , НовыйПараметрыУскорения(Корабль, КоординатыЦели));
	
	Возврат Результат;
	
КонецФункции

Функция Выстрел(Корабль, Цель, Орудие = Неопределено)
	
	Если Орудие = Неопределено Тогда
		Орудие = ОсновноеОрудиеКорабля(Корабль);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Command"	, "ATTACK");
	Результат.Вставить("Parameters" , НовыйПараметрыВыстрела(Корабль, Орудие, Цель));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Сущности

#Область Сущности

Функция НовыйВектор(Знач x, Знач y = Неопределено, Знач z = Неопределено)
	
	Вектор = Новый Структура("x, y, z", 0,0,0);
	
	Если ТипЗнч(x) = Тип("Строка") Тогда
		
		ВекторСтрока    = x;
		ЭлементыВектора = Новый Массив;
		
		Для Сч = 1 По 3 Цикл
			Разделитель   = Найти(ВекторСтрока, "/");
			Если Разделитель = 0 Тогда
				ЭлементыВектора.Добавить(ВекторСтрока);
				Прервать;
			КонецЕсли;
			ЭлементВектора = Лев(ВекторСтрока, Разделитель - 1);
			ЭлементыВектора.Добавить(ЭлементВектора);
			ВекторСтрока = Сред(ВекторСтрока, Разделитель + 1)
		КонецЦикла;
		
		Если ЭлементыВектора.Количество() = 3 Тогда
			Вектор.x = Число(ЭлементыВектора[0]);
			Вектор.y = Число(ЭлементыВектора[1]);
			Вектор.z = Число(ЭлементыВектора[2]);
		КонецЕсли
		
	ИначеЕсли ТипЗнч(x) = Тип("Структура") Тогда
		
		Возврат x;
		
	Иначе
		
		Вектор.x = x;
		Вектор.y = y;
		Вектор.z = z;
		
	КонецЕсли;
	
	Возврат Вектор;
	
КонецФункции

Функция ВекторСтрокой(Вектор)
	
	Если ТипЗнч(Вектор) = Тип("Строка") Тогда
		Возврат Вектор;
	КонецЕсли;
	
	Возврат СтрШаблон("%1/%2/%3", Вектор.x, Вектор.y, Вектор.z); 
	
КонецФункции

Функция НовыйПараметрыУскорения(Корабль, КоординатыЦели)
	
	X_Корабля = Число(НовыйВектор(Корабль["Position"]).X);
	Y_Корабля = Число(НовыйВектор(Корабль["Position"]).Y);
	Z_Корабля = Число(НовыйВектор(Корабль["Position"]).Z);
	
	X_СкоростьКорабля = Число(НовыйВектор(Корабль["Velocity"]).X);
	Y_СкоростьКорабля = Число(НовыйВектор(Корабль["Velocity"]).Y);
	Z_СкоростьКорабля = Число(НовыйВектор(Корабль["Velocity"]).Z);
	
	Двигатель = ДвигательКорабля(Корабль);
	МаксимальноеУскорение = Число(Двигатель["MaxAccelerate"]);
	
	X_Цели = Число(НовыйВектор(КоординатыЦели).x);
	Y_Цели = Число(НовыйВектор(КоординатыЦели).y);
	Z_Цели = Число(НовыйВектор(КоординатыЦели).z);
	
	X_Корабля = X_Корабля + X_СкоростьКорабля;
	
	i = 1 ;
	x = Неопределено;
	y = Неопределено;
	z = Неопределено;
	
	
	//Определим на сколько можем ускорится 
	Пока i <= МаксимальноеУскорение Цикл
		
		Если X_Корабля < X_Цели Тогда
			Если X_Корабля + X_СкоростьКорабля + ТормознойПуть(X_СкоростьКорабля + i) < X_Цели Тогда
				//Отладка.Добавить("#1");
				x = i;
			КонецЕсли;
		Иначе
			Если X_Корабля + X_СкоростьКорабля + ТормознойПуть(X_СкоростьКорабля - i) > X_Цели Тогда
				//Отладка.Добавить("#2");
				x = -i;
			КонецЕсли;
		КонецЕсли;
		
		Если Y_Корабля < Y_Цели Тогда
			Если Y_Корабля + Y_СкоростьКорабля + ТормознойПуть(Y_СкоростьКорабля + i) < Y_Цели Тогда
				y = i;
			КонецЕсли;
		Иначе
			Если Y_Корабля + Y_СкоростьКорабля + ТормознойПуть(Y_СкоростьКорабля - i) > Y_Цели Тогда
				y = -i;
			КонецЕсли;
		КонецЕсли;
		
		Если Z_Корабля < Z_Цели Тогда
			Если Z_Корабля + Z_СкоростьКорабля + ТормознойПуть(Z_СкоростьКорабля + i) < Z_Цели Тогда
				z = i;
			КонецЕсли;
		Иначе
			Если Z_Корабля + Z_СкоростьКорабля + ТормознойПуть(Z_СкоростьКорабля - i) > Z_Цели Тогда
				z = -i;
			КонецЕсли;
		КонецЕсли;
		
		i = i + 1 ;
		
	КонецЦикла;
	
	//Определим можем ли дрейфовать 
	Если x = Неопределено Тогда 
		Если X_Корабля < X_Цели Тогда 
			Если X_Корабля + X_СкоростьКорабля + ТормознойПуть(X_СкоростьКорабля) < X_Цели Тогда 
				
				x = 0;
			КонецЕсли;
		Иначе 
			Если X_Корабля + X_СкоростьКорабля + ТормознойПуть(X_СкоростьКорабля) > X_Цели Тогда 
				
				x = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если y = Неопределено Тогда 
		Если Y_Корабля < Y_Цели Тогда 
			Если Y_Корабля + Y_СкоростьКорабля + ТормознойПуть(Y_СкоростьКорабля) < Y_Цели Тогда 
				y = 0;
			КонецЕсли;
		Иначе 
			Если Y_Корабля + Y_СкоростьКорабля + ТормознойПуть(Y_СкоростьКорабля) > Y_Цели Тогда 
				y = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если z = Неопределено Тогда 
		Если Z_Корабля < Z_Цели Тогда 
			Если Z_Корабля + Z_СкоростьКорабля + ТормознойПуть(Z_СкоростьКорабля) < Z_Цели Тогда 
				z = 0;
			КонецЕсли;
		Иначе 
			Если Z_Корабля + Z_СкоростьКорабля + ТормознойПуть(Z_СкоростьКорабля) > Z_Цели Тогда 
				z = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Если не разгоняемся и не дрефйуем то тормозим по тормоз до упора
	Если x = Неопределено Тогда 
		Если X_СкоростьКорабля > 0 Тогда
			
			x = МаксимальноеУскорение * (-1);
		Иначе
			
			x = МаксимальноеУскорение;
		КонецЕсли;
	КонецЕсли;
	
	Если y = Неопределено Тогда 
		Если Y_СкоростьКорабля > 0 Тогда
			y = МаксимальноеУскорение * (-1);
		Иначе
			y = МаксимальноеУскорение;
		КонецЕсли;
	КонецЕсли;
	
	Если z = Неопределено Тогда 
		Если Z_СкоростьКорабля > 0 Тогда
			z = МаксимальноеУскорение * (-1);
		Иначе 
			z = МаксимальноеУскорение;
		КонецЕсли;
	КонецЕсли;
	
	//Отладка.Добавить(Строка(Корабль["Id"]) + " VEK_:" +  ВекторСтрокой(НовыйВектор(x,y,z)));
	
	Возврат Новый Структура("Id, Vector",
	Корабль["Id"],
	ВекторСтрокой(НовыйВектор(x,y,z)));
	
КонецФункции

Функция НовыйПараметрыАвтопилота(Корабль, Вектор)
	
	ПараметрыАвтопилота = Новый Структура;
	ПараметрыАвтопилота.Вставить("Id"	 , Корабль["Id"]); 
	ПараметрыАвтопилота.Вставить("Target", ВекторСтрокой(Вектор));

	Возврат ПараметрыАвтопилота;

КонецФункции

Функция НовыйПараметрыВыстрела(Корабль, Орудие, Цель)
	
	ПараметрыВыстрела = Новый Структура;
	ПараметрыВыстрела.Вставить("Id"		, Корабль["Id"]);
	ПараметрыВыстрела.Вставить("Name"	, Орудие["Name"]);
	ПараметрыВыстрела.Вставить("Target"	, ВекторСтрокой(Цель));

	Возврат ПараметрыВыстрела;
	
КонецФункции

Функция НовыйОтвет()
	
	Ответ = Новый Соответствие;
	Ответ.Вставить("UserCommands", Новый Массив);
	Ответ.Вставить("Message"     , "");
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Вычисления

#Область Вычисления

Функция РасстояниеЧебышев(Знач Позиция1, Знач Позиция2)
	
	Если ТипЗнч(Позиция1) = Тип("Строка") Тогда
		Позиция1 = НовыйВектор(Позиция1);
	КонецЕсли;
	
	Если ТипЗнч(Позиция2) = Тип("Строка") Тогда
		Позиция2 = НовыйВектор(Позиция2);
	КонецЕсли;
	
	РасстояниеX = МодульЧисла(Позиция2.X - Позиция1.X);
	РасстояниеY = МодульЧисла(Позиция2.Y - Позиция1.Y);
	РасстояниеZ	= МодульЧисла(Позиция2.Z - Позиция1.Z);
	
	Расстояние = Макс(РасстояниеX, РасстояниеY, РасстояниеZ); 
	
	Возврат Расстояние
	
КонецФункции

Функция МодульВектора(Знач Вектор)

	Если ТипЗнч(Вектор) = Тип("Строка") Тогда
		Вектор = НовыйВектор(Вектор);
	КонецЕсли;

	Возврат Макс(
		МодульЧисла(Вектор.X), 
		МодульЧисла(Вектор.Y), 
		МодульЧисла(Вектор.Z));

КонецФункции

Функция МодульЧисла(Значение)
	
	Возврат Макс(Значение, - Значение);
	
КонецФункции

Функция СуммаВекторов(Знач Вектор1, Знач Вектор2)
	
	Вектор1 = НовыйВектор(Вектор1);
	Вектор2 = НовыйВектор(Вектор2);
	
	Возврат НовыйВектор(
		Вектор1.X + Вектор2.X, 
		Вектор1.Y + Вектор2.Y, 
		Вектор1.Z + Вектор2.Z);
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Служебные процедуры и функции

#Область СлужебныеПроцедурыиФункции

Процедура ЦиклЖизни(ТестовыеАргументы = Неопределено)
	
	Пока Истина Цикл
		
		Если ТестовыеАргументы = Неопределено Тогда
		
			// Входящий поток
		
			ВходныеДанные  = Консоль.ПрочитатьСтроку();
			ВыходнойФайл = Неопределено;
		
		Иначе

			// Отладка через файл

			ВходнойФайл = ТестовыеАргументы[0];
			ВыходнойФайл = ТестовыеАргументы[1];
			Чтение = Новый ЧтениеТекста(ВходнойФайл);
			ВходныеДанные = Чтение.Прочитать();
			Чтение.Закрыть();

		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(ВходныеДанные) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ИнициализироватьОкружение(ВходныеДанные);
			ВыполнитьСценарий();	
			
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			ПодготовитьОтветОписаниеОшибки(ОписаниеОшибки);		
			
		КонецПопытки;
		
		ВывестиВалидныйОтвет(ВыходнойФайл);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьОкружение(ВходныеДанные)

	// Служебные

	НомерИтерации  = НомерИтерации + 1;
	НачалоИтерации = ТекущаяУниверсальнаяДатаВМиллисекундах();

	// Новые

	Отладка = Новый Массив();
	Ответ   = НовыйОтвет();
	
	// Представления

	Состояние 	  	  = ПарсерJSON.ПрочитатьJSON(ВходныеДанные);
	Корабли 		  = Состояние["My"];
	КораблиПротивника = Состояние["Opponent"]; 	
		
КонецПроцедуры

Процедура ВывестиВалидныйОтвет(ТестовыйФайл = Неопределено)
	
	МаксимальнаяДлинаСообщения = 2000;
	
	ВалидныйОтветСтрока = ПарсерJSON.записатьJSON(Ответ);
	ВалидныйОтветСтрока = СтрЗаменить(ВалидныйОтветСтрока, Символы.ПС, "");
	ВалидныйОтветСтрока = СтрЗаменить(ВалидныйОтветСтрока, " ", "");
	
	КонецИтерации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ИтерацияВМиллисекундах  = КонецИтерации - НачалоИтерации;	
	
	НачалоСообщения = """Message"":""";
	ОтладочноеСообщение = "in:" + НомерИтерации + ";it:" + Строка(ИтерацияВМиллисекундах) + ";";
	Для Каждого Элемент Из Отладка Цикл
		ОтладочноеСообщение = ОтладочноеСообщение + Элемент + ";";
	КонецЦикла;
	
	JSON = Новый Структура;
	JSON.Вставить("k", ОтладочноеСообщение);
	
	ЭкранированыйТекст = ПарсерJSON.записатьJSON(JSON);
	ЭкранированыйТекст = СтрЗаменить(ЭкранированыйТекст, Символы.ПС, "");
	ЭкранированыйТекст = СтрЗаменить(ЭкранированыйТекст, " ", "");
	
	ОтладочноеСообщение = Сред(ЭкранированыйТекст, 7, СтрДлина(ЭкранированыйТекст) - 8);
	
	// обработка отладночго сообщения
	
	ОтладочноеСообщение = СтрЗаменить(ОтладочноеСообщение, Символы.ПС, "");
	ОтладочноеСообщение = СтрЗаменить(ОтладочноеСообщение, " ", "");
	
	// попытка вставить сообщение
	
	ВалидныйОтветСтрокаССообщением = СтрЗаменить(ВалидныйОтветСтрока, НачалоСообщения, НачалоСообщения + ОтладочноеСообщение);
	ДлинаСообщения = СтрДлина(ВалидныйОтветСтрокаССообщением);
	
	Если ДлинаСообщения > МаксимальнаяДлинаСообщения Тогда
		
		ПревышениеДлины = ДлинаСообщения - МаксимальнаяДлинаСообщения;	
		ДлинаОтладочногоСообщения = СтрДлина(ОтладочноеСообщение);
		
		Если ДлинаОтладочногоСообщения >= ПревышениеДлины Тогда
			
			ОтладочноеСообщение 			= Лев(ОтладочноеСообщение, ДлинаОтладочногоСообщения - ПревышениеДлины);
			ВалидныйОтветСтрокаПослеОбрезки = СтрЗаменить(ВалидныйОтветСтрока, НачалоСообщения, НачалоСообщения + ОтладочноеСообщение);
			
			Если СтрДлина(ВалидныйОтветСтрокаПослеОбрезки) <= МаксимальнаяДлинаСообщения Тогда
				ВалидныйОтветСтрока = ВалидныйОтветСтрокаПослеОбрезки;
			КонецЕсли
		КонецЕсли;
		
	Иначе
		
		ВалидныйОтветСтрока = ВалидныйОтветСтрокаССообщением;
		
	КонецЕсли;
	
	Если ТестовыйФайл = Неопределено Тогда
		Консоль.ВывестиСтроку(ВалидныйОтветСтрока);
	Иначе
		Запись = Новый ЗаписьТекста(ТестовыйФайл);
		Запись.Записать(ВалидныйОтветСтрока);
		Запись.Закрыть();
	КонецЕсли	
	
КонецПроцедуры

Процедура ПодготовитьОтветОписаниеОшибки(ОписаниеОшибки)

	Ответ = Новый Соответствие();
	Ответ.Вставить("UserCommands", Новый Массив());
	Ответ.Вставить("Message"     , ТранслитироватьСтроку(ОписаниеОшибки));
	
КонецПроцедуры

Функция МассивСоответствийВТаблицуЗначений(Массив)
	
	Результат = Новый ТаблицаЗначений();
	Если Массив.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	//Считаем что все соответствия одинаковы по составу полей

	ПервоеСоответствие = Массив[0];
	Для Каждого Элемент Из ПервоеСоответствие Цикл
		Результат.Колонки.Добавить(Элемент.Ключ);
	КонецЦикла;
	Результат.Колонки.Добавить("ИзначальноеСоответствие");
	
	Для Каждого Соответстие Из Массив Цикл
		НоваяСтрока = Результат.Добавить();
		Для Каждого Колонка из Результат.Колонки Цикл
			Ключ = Колонка.Имя;
			НоваяСтрока[Ключ] = Соответстие[Ключ];
		КонецЦикла;
		НоваяСтрока.ИзначальноеСоответствие = Соответстие;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаЗначенийВМассивСоответствий(Таблица)
	
	Результат = Новый Массив;
	
	СписокКолонок = "";
	Для Каждого Колонка из Таблица.Колонки Цикл
		СписокКолонок = СписокКолонок + ?(ПустаяСтрока(СписокКолонок), "", ", ") + Колонка.Имя;	
	КонецЦикла;
	
	Для Каждого Строка из Таблица Цикл
		Соответствие = Новый Соответствие();
		Для Каждого Колонка из Таблица.Колонки Цикл
			Соответствие.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		Результат.Добавить(Соответствие);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТранслитироватьСтроку(Знач Строка)

	Для Каждого Элемент Из ПравилоТранслитерации() Цикл
		Строка = СтрЗаменить(Строка, Элемент.Ключ, Элемент.Значение);
		Строка = СтрЗаменить(Строка, ВРег(Элемент.Ключ), ВРег(Элемент.Значение));
	КонецЦикла;

	Возврат Строка;

КонецФункции

Функция ПравилоТранслитерации()

	ПравилоТранслитерации = Новый Соответствие;
	ПравилоТранслитерации.Вставить("а", "a");	
	ПравилоТранслитерации.Вставить("б", "b");
	ПравилоТранслитерации.Вставить("в", "v");
	ПравилоТранслитерации.Вставить("г", "g");
	ПравилоТранслитерации.Вставить("д", "d");
	ПравилоТранслитерации.Вставить("е", "e");
	ПравилоТранслитерации.Вставить("ё", "e");
	ПравилоТранслитерации.Вставить("ж", "zh");
	ПравилоТранслитерации.Вставить("з", "z");
	ПравилоТранслитерации.Вставить("и", "i");
	ПравилоТранслитерации.Вставить("й", "y");
	ПравилоТранслитерации.Вставить("к", "k");
	ПравилоТранслитерации.Вставить("л", "l");
	ПравилоТранслитерации.Вставить("м", "m");
	ПравилоТранслитерации.Вставить("н", "n");
	ПравилоТранслитерации.Вставить("о", "o");
	ПравилоТранслитерации.Вставить("п", "p");
	ПравилоТранслитерации.Вставить("р", "r");
	ПравилоТранслитерации.Вставить("с", "s");
	ПравилоТранслитерации.Вставить("т", "t");
	ПравилоТранслитерации.Вставить("у", "u");
	ПравилоТранслитерации.Вставить("ф", "f");
	ПравилоТранслитерации.Вставить("х", "h");
	ПравилоТранслитерации.Вставить("ц", "c");
	ПравилоТранслитерации.Вставить("ч", "ch");
	ПравилоТранслитерации.Вставить("ш", "sh");
	ПравилоТранслитерации.Вставить("щ", "shch");
	ПравилоТранслитерации.Вставить("ъ", "");
	ПравилоТранслитерации.Вставить("ы", "y");
	ПравилоТранслитерации.Вставить("ь", "");
	ПравилоТранслитерации.Вставить("э", "e");
	ПравилоТранслитерации.Вставить("ю", "yu");
	ПравилоТранслитерации.Вставить("я", "ya");

	Возврат ПравилоТранслитерации;

КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Основная программа

Консоль       = Новый Консоль();
ПарсерJSON    = Новый ПарсерJSON();
НомерИтерации = 0;

Если АргументыКоманднойСтроки.Количество() > 0 Тогда

	ЦиклЖизни(АргументыКоманднойСтроки);

Иначе

	ЦиклЖизни();

КонецЕсли